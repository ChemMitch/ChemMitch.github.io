var GSRSAPI_consoleStack=[];"".trim||(String.prototype.trim=function(){return this.replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g,"")}),$.support||($.support={}),$.support.cors=!0;var CALLBACK_NUMBER=0,GSRSAPI={PrimaryCodes:["CAS","PUBCHEM","BDNUM"],MultipleMatchMessage:"matched multiple records",StartQueryChar:"^",EscapedQuote:'"',builder:function(){var e={};e.GlobalSettings={_url:"https://gsrs.ncats.nih.gov/ginas/app/api/v1/",_status:"OK",_errorMessage:"",_structureUrl:"structure",getBaseURL:function(){return e.GlobalSettings._url},setBaseURL:function(t){return e.GlobalSettings._url=t,e.GlobalSettings},getHomeURL:function(){return e.GlobalSettings.getBaseURL().replace(/api.v1.*/g,"")},httpType:function(){return"json"},authToken:null,authUsername:null,authKey:null,authenticate:function(t){t.headers={},e.GlobalSettings.authUsername&&e.GlobalSettings.authUsername.length>0&&e.GlobalSettings.authKey&&e.GlobalSettings.authKey.length>0?(t.headers["auth-username"]=e.GlobalSettings.authUsername,t.headers["auth-key"]=e.GlobalSettings.authKey,console.log("using name/key authentication")):e.GlobalSettings.authToken&&e.GlobalSettings.authToken.length>0?(t.headers["auth-token"]=e.GlobalSettings.authToken,console.log("using token authentication")):console.log("no authentication configured")},getStatus:function(){return GlobalSettings._status},setStatus:function(e){GlobalSettings._status=e,console.log("Setting status to "+e)},getErrorMessage:function(){return GlobalSettings._errorMessage},setStructureUrl:function(e){return this._structureUrl=e,this},getStructureUrl:function(){return this._structureUrl}},e.isJson=function(e){try{JSON.parse(e)}catch(t){return console.log("error in isJson: "+JSON.stringify(t)),console.log("   input: "+e),!1}return!0},e.httpProcess=function(t){return console.log("httpProcess req: "+JSON.stringify(t)),e.JPromise.of((function(r){var n=t._b,o="application/json";n&&!t.skipJson?n=JSON.stringify(n):(n=n||t._q,o="text/plain"),t._url.match(/.*[?]/)?t._url=t._url+"&cache="+e.UUID.randomUUID():t._url=t._url+"?cache="+e.UUID.randomUUID(),console.log("in httpProcess, req.skipJson: "+t.skipJson+"; method: "+t._method+"; url: "+t._url+"; b: "+JSON.stringify(n)),e.GlobalSettings.authenticate(t),console.log("(g_api.httpProcess) going to call url: "+t._url),t._q&&t._q.q&&console.log("   with query: "+t._q.q),console.log("b128: "+JSON.stringify(n)),$.ajax({url:t._url,dataType:GlobalSettings.httpType(),contentType:o,type:t._method,data:n,beforeSend:function(e){t.headers&&_.forEach(_.keys(t.headers),(function(r){e.setRequestHeader(r,t.headers[r])}))},success:function(e){console.log("ajax call success "),console.log("\tat "+new Date(_.now())),r(e)},error:function(t,n,o){console.log("ajax call error ");var a="Error from server. response: "+JSON.stringify(t)+"; url: "+this.url;if(console.log(a),(t.status>=400&&t.status<=600||0===t.status)&&(500===t.status&&"java.lang.reflect.InvocationTargetException"===t.responseText&&4===t.readyState?console.log("500 error"):404===t.status&&4===t.readyState?(console.log("404 error -- expected when no data for a section"),console.log("response.responseText: "+t.responseText),0===t.responseText.length?(console.log("early build"),r(t)):console.log("late build")):GlobalSettings.setStatus("ERROR "+t.status)),GlobalSettings._errorMessage=n,t.responseText){console.log("Noting error. "),GlobalSettings._errorMessage=t.responseText,console.log("\tjust set errorMessage");var i={valid:!1};if(console.log("\tinitialized retMsg"),"string"==typeof t.responseText&&e.isJson(t.responseText)){var u=JSON.parse(t.responseText);console.log(" parsed JSON"),u.validationMessages&&u.validationMessages.length>0?(console.log("\terror msg: "+u.validationMessages[0].message),i.message=u.validationMessages[0].message,GlobalSettings._errorMessage=u.validationMessages[0].message,u.validationMessages.length>1&&(i.message=i.message+" + more",GlobalSettings._errorMessage=GlobalSettings._errorMessage+"...")):u.message?(i.message=u.message,GlobalSettings._errorMessage=u.message):i.message="unparsed error"}else"object"==typeof t.responseText&&t.responseText.message?(console.log(" object"),i.message=t.responseText.message,502===t.status&&(console.log("502; proxy error"),i.message="proxy error on server. Please report this to your administrator!")):(console.log(" simple message. response.status: "+t.status),i.message=t.responseText,502===t.status&&(console.log("502; proxy error"),i.message="proxy error on server. Please report this to your administrator!"));console.log("Calling cb with retMsg. cb: "+JSON.stringify(r)),r(i||"[no data]")}else t.statusText?console.log("statusText: "+t.statusText):(console.log("Error missing"),r(t))}})}))},e.getListener=function(e,t){return{total:e,current:0,callback:t,decrement:function(){this.current++,this.current>=this.total&&this.callback()}}},e.JPromise={ofScalar:function(t){return e.JPromise.of((function(e){e(t)}))},of:function(t){var r={get:function(e){t(e)},andThen:function(t){return e.JPromise.of((function(e){r.get((function(r){var n=t(r);n&&n._promise?n.get(e):e(void 0===n?r:n)}))}))},_promise:!0};return r},join:function(t){var r;return r=arguments.length>1?arguments:t,e.JPromise.of((function(t){for(var n={},o=e.getListener(r.length,(function(){t(function(){for(var e=[],t=0;t<r.length;t++)e.push(n[t]);return e}())})),a=function(e,t){null!=e&&e.get((function(e){n[t]=e,o.decrement()}))},i=0;i<r.length;i++)a(r[i],i)}))}},e.gUtil={empty:{},deepIterate:function(t,r,n){if(_.isFunction(t))return e.gUtil.empty;if(_.isObject(t))if(_.isArray(t)){var o=_.keys(t);_.forEach(o,(function(o){e.gUtil.deepIterate(t[o],r+"["+o+"]",n)}))}else{var a=_.keys(t);_.forEach(a,(function(o){e.gUtil.deepIterate(t[o],r+"/"+o,n)}))}else n(r,t)},forEachDeep:function(t,r,n){var o=function(e,t,r,n){return{path:e,key:t,value:r,parent:n}};if(_.isFunction(t))return e.gUtil.empty;if(_.isObject(t))if(_.isArray(t)){var a=_.keys(t),i=!1;if(_.forEach(a,(function(a){var u=n(o(r,a,t[a],t));u===e.gUtil.empty?(t[a]=e.gUtil.empty,i=!0):(void 0!==u&&(t[a]=u),e.gUtil.forEachDeep(t[a],r+"/"+a,n))})),i){var u=_.filter(t,(function(t){return t!==e.gUtil.empty}));t.splice(0,t.length),_.forEach(u,(function(e){t.push(e)}))}}else{var s=_.keys(t);_.forEach(s,(function(a){var i=n(o(r,a,t[a],t));i===gUtil.empty?delete t[a]:(void 0!==i&&(t[a]=i),e.gUtil.forEachDeep(t[a],r+"/"+a,n))}))}},removeDeep:function(t,r){e.gUtil.forEachDeep(t,"",(function(e){if(r(e))return gUtil.empty}))},removeKeysLike:function(t,r){e.gUtil.removeDeep(t,(function(e){return e.key.match(r)}))},toDate:function(e){return new Date(e)}},e.ResourceFinder={builder:function(){var t={resource:function(e){return t.resource=e,t},searcher:function(){return e.SearchRequest.builder().resource(t.resource)},search:function(e){return t.searcher().query(e).execute()},get:function(r){var n=e.GlobalSettings.getBaseURL()+t.resource+"("+r+")",o=e.Request.builder().url(n);return e.httpProcess(o).andThen((function(t){return e.SubstanceBuilder.fromSimple(t)}))},extend:function(e){var r=e(t);return void 0!==r?r:t}};return t}},e.SubstanceFinder=e.ResourceFinder.builder().resource("substances").extend((function(r){r.searchByExactNameOrCode=function(e){return t.isUUID(e)?r.get(e).andThen((function(e){return{content:[e]}})):r.search("root_names_name:"+GSRSAPI.EscapedQuote+GSRSAPI.StartQueryChar+e+"$"+GSRSAPI.EscapedQuote+"OR root_approvalID:"+GSRSAPI.EscapedQuote+GSRSAPI.StartQueryChar+e+"$"+GSRSAPI.EscapedQuote+"OR root_codes_code:"+GSRSAPI.EscapedQuote+GSRSAPI.StartQueryChar+e+"$"+GSRSAPI.EscapedQuote)},r.searchByExactNameAndCode=function(e,n,o){if(t.isUUID(e))return r.get(e).andThen((function(e){return{content:[e]}}));if(void 0===n)return console.log("code is undefined; going to search by name"),r.searchByExactName(e);var a=[];a.push("root_names_name:"+GSRSAPI.EscapedQuote+GSRSAPI.StartQueryChar+e+"$"+GSRSAPI.EscapedQuote+GSRSAPI.StartQueryChar+" "),void 0!==o&&o.length>0?a.push("root_codes_"+o+":"+GSRSAPI.EscapedQuote+GSRSAPI.StartQueryChar+n+"$"+GSRSAPI.EscapedQuote):a.push("root_codes_code:"+GSRSAPI.EscapedQuote+GSRSAPI.StartQueryChar+n+"$"+GSRSAPI.EscapedQuote);var i=a.join(" AND ");return console.log("searchByExactNameAndCode using "+i),r.search(i)},r.searchByExactCode=function(e){return r.search('root_codes_code:"^'+e+'$"')},r.comprehensiveSubstanceSearch=function(n){var o="";if(t.isUUID(n))return r.get(n).andThen((function(e){return{content:[e]}}));e.StructureFinder.isPossibleInChiKey(n)&&(o="root_structure_inchikey:"+GSRSAPI.EscapedQuote+GSRSAPI.StartQueryChar+n+"$"+GSRSAPI.EscapedQuote,console.log("isPossibleInChiKey returned true"));var a=[];return _.forEach(GSRSAPI.PrimaryCodes,(function(e){a.push("root_codes_"+e+":"+GSRSAPI.EscapedQuote+GSRSAPI.StartQueryChar+n+"$"+GSRSAPI.EscapedQuote)})),0===o.length&&(o="root_names_name:"+GSRSAPI.EscapedQuote+GSRSAPI.StartQueryChar+n+"$"+GSRSAPI.EscapedQuote+" OR root_approvalID:"+GSRSAPI.EscapedQuote+GSRSAPI.StartQueryChar+n+"$"+GSRSAPI.EscapedQuote+" OR "+a.join(" OR ")),r.search(o).andThen((function(e){return e.content&&e.content.length>1?(e.content.length,SubstanceBuilder.filterSubstances(e,n,GSRSAPI.PrimaryCodes,"PRIMARY",["SUPERSEDED"]).andThen((function(e){return console.log("filteredResults.andThen "+e.length),1===e.length?{content:e}:{content:[GSRSAPI.MultipleMatchMessage]}}))):e.content&&1===e.content.length?e:(console.log("first query returned 0 hits; will now search by all codes"),r.searchByExactCode(n).andThen((function(e){return e.content&&e.content.length>1?(e.content.length,SubstanceBuilder.filterSubstances(e,n,GSRSAPI.PrimaryCodes,"PRIMARY",["SUPERSEDED"]).andThen((function(e){return console.log("filteredCodeResults.andThen "+e.length),1===e.length?{content:e}:{content:[GSRSAPI.MultipleMatchMessage]}}))):e.content&&1===e.content.length?e:void 0})))}))},r.comprehensiveSubstanceSearchByArgs=function(e){if(console.log("starting in comprehensiveSubstanceSearchByArgs"),void 0!==e.uuid&&t.isUUID(e.uuid.getValue()))return r.get(e.uuid.getValue()).andThen((function(e){return{content:[e]}}));var n=[];void 0!==e.bdnum&&void 0!==e.bdnum.getValue()&&e.bdnum.getValue().length>0&&n.push("root_codes_BDNUM:"+GSRSAPI.EscapedQuote+GSRSAPI.StartQueryChar+e.bdnum.getValue()+"$"+GSRSAPI.EscapedQuote),void 0!==e.pt&&void 0!==e.pt.getValue()&&e.pt.getValue().length>0&&n.push("root_names_name:"+GSRSAPI.EscapedQuote+GSRSAPI.StartQueryChar+e.pt.getValue()+"$"+GSRSAPI.EscapedQuote);var o="";void 0!==e.approvalID&&void 0!==e.approvalID.getValue()&&e.approvalID.getValue().length>0?o=e.approvalID.getValue():void 0!==e.unii&&void 0!==e.unii.getValue()&&e.unii.getValue().length>0&&(o=e.unii.getValue()),o.length>0&&n.push("root_approvalID:"+GSRSAPI.EscapedQuote+GSRSAPI.StartQueryChar+o+"$"+GSRSAPI.EscapedQuote);var a=n.join(" AND ");return console.log("comprehensiveSubstanceSearchByArgs query: "+a),r.search(a).andThen((function(e){if(console.log("comprehensiveSubstanceSearchByArgs andThen "),e.content&&e.content.length>1){var t="WARNING search for returned "+e.content.length+" items";return console.log(t),JPromise.ofScalar({content:[GSRSAPI.MultipleMatchMessage]})}return e.content&&1===e.content.length?(console.log("found exactly 1 hit: "+JSON.stringify(e)),e):(console.log("first query returned 0 hits; will now search by all codes"),{valid:!1,message:"no records found"})}))},r.getExactStructureMatches=function(t){console.log("in getExactStructureMatches");var r=e.Request.builder().url(e.GlobalSettings.getBaseURL()+"substances/structureSearch").queryStringData({q:t,type:"exact",sync:"true"});return e.httpProcess(r).andThen((function(t){if(console.log("firstResult: "+JSON.stringify(t)),0==t.count&&!_.isUndefined(t.uri)&&t.uri.length>0){var r=t.path.indexOf("status");if(console.log("pos for status "+r),r>0){var n=e.GlobalSettings.getBaseURL()+t.path.substring(r);console.log("URL for search results: "+n);var o=e.Request.builder().url(n);return e.httpProcess(o).andThen((function(e){return e.content}))}return t}return t}))},r.saveTemporaryStructure=function(t){var r=e.GlobalSettings.getBaseURL(),n=r.indexOf("api"),o=r;-1===e.GlobalSettings.getStructureUrl().toUpperCase().indexOf("INTERPRET")&&(o=r.substring(0,n)),r=o+e.GlobalSettings.getStructureUrl(),console.log("url for structure save: "+r);var a=e.Request.builder().url(r).method("POST").setSkipJson(!0).body(t).setContents({body:t});return e.httpProcess(a).andThen((function(e){return e}))},r.searchByExactName=function(e){return r.search("root_names_name:"+GSRSAPI.EscapedQuote+GSRSAPI.StartQueryChar+e+"$"+GSRSAPI.EscapedQuote)}})),e.ReferenceFinder=e.ResourceFinder.builder().resource("references").extend((function(e){e.searchByLastEdited=function(t){return e.search("root_lastEditedBy:"+GSRSAPI.EscapedQuote+GSRSAPI.StartQueryChar+t+"$"+GSRSAPI.EscapedQuote)}})),e.CVFinder=e.ResourceFinder.builder().resource("vocabularies").extend((function(e){e.searchByDomain=function(t){return console.log("going to run cvfinder: root_domain:"+GSRSAPI.EscapedQuote+GSRSAPI.StartQueryChar+t+"$"+GSRSAPI.EscapedQuote),e.search("root_domain:"+GSRSAPI.EscapedQuote+GSRSAPI.StartQueryChar+t+"$"+GSRSAPI.EscapedQuote)}})),e.SearchRequest={builder:function(){var t={_limit:10,_skip:0,_resource:"resource",_query:"",limit:function(e){return t._limit=e,t},skip:function(e){return t._skip=e,t},top:function(e){return t.limit(e)},resource:function(e){return t._resource=e,t},query:function(e){return t._query=e,t},asRequest:function(){return e.Request.builder().url(e.GlobalSettings.getBaseURL()+t._resource+"/search").queryStringData({q:t._query,top:t._limit,skip:t._skip})},execute:function(){var r=t.asRequest();return e.httpProcess(r)}};return t}},e.SearchResponse={builder:function(){var e={mix:function(t){return _.merge(e,t),e}};return e}},e.SubstanceBuilder={fromSimple:function(t){return t._cache={},t.getBestID=function(){return t._approvalIDDisplay?t._approvalIDDisplay:t.uuid},t.full=function(){if(!t.uuid)return e.JPromise.ofScalar(t);var r=Request.builder().url(e.GlobalSettings.getBaseURL()+"substances("+t.uuid+")").queryStringData({view:"full"});return e.httpProcess(r)},t.fetch=function(r,n){var o=t._cache[r],a=null;if(o)a=e.JPromise.ofScalar(o);else{var i=e.GlobalSettings.getBaseURL()+"substances("+t.uuid+")/";r&&(i+=r);var u=e.Request.builder().url(i);a=e.httpProcess(u)}return n?a.andThen(n):a},t.patch=function(){var e=Patch.builder();return t.uuid||(e=e.setMethod("POST")),e._oldApply=e.apply,e._oldCompute=e.compute,e._oldValidate=e.validate,e.apply=function(){return e._oldApply(t)},e.compute=function(){return e._oldCompute(t)},e.validate=function(){return e._oldValidate(t)},e},t},filterSubstances:function(e,t,r,n,o){console.log("starting in filterSubstances. searchValue: "+t+" answerSet.content.len "+e.content.length);var a=_.map(e.content,(function(e){return GGlob.SubstanceBuilder.fromSimple(e).full()})),i=[];return GGlob.JPromise.join(a).andThen((function(e){return console.log("subProms andthen fullList "+e.length),e=_.map(e,(function(e){return GGlob.SubstanceBuilder.fromSimple(e)})),i=_.filter(e,(function(e){return _.filter(e.names,(function(e){if(e.name.toUpperCase()===t.toUpperCase())return console.log("   found exact name match on "+t),!0})).length>0})),console.log("filteredSubstances len: "+i.length),0===i.length&&0===(i=_.filter(e,(function(e){return _.filter(e.codes,(function(e){if(e.code===t&&_.includes(r,e.codeSystem)&&e.type===n)return console.log("   found primary code match on "+t),!0})).length>0}))).length&&(console.log("no match on either name or primary codes; now looking at other code types"),i=_.filter(e,(function(e){return _.filter(e.codes,(function(e){return e.code===t&&_.includes(r,e.codeSystem)&&e.type===n?(console.log("   found primary code match on "+t),!0):e.code===t&&_.includes(r,e.codeSystem)&&!_.includes(o,e.type)?(console.log("   found code match on "+t),!0):void 0})).length>0}))),i.length>0?i:e}))}},e.Patch={builder:function(){var t={ops:[],change:function(e){return t.ops.push(e),t},replace:function(e,r){return t.change({op:"replace",path:e,value:r})},remove:function(e){return t.change({op:"remove",path:e})},_method:"PUT",_transform:function(e){return e},appendTransform:function(e){var r=t._transform;return t._transform=function(t){var n=r(t);return e(n)},t},setMethod:function(e){return t._method=e,t},update:function(e){return console.log("b.update!"),t.change({op:"update",path:e})},add:function(e,r){return t.change({op:"add",path:e,value:r})},addData:function(e){return e.addToPatch(t)},transform:function(e){return console.log("b.transform"),jsonpatch.apply(e,t.ops),t._transform(e)},apply:function(r){return r.full().andThen((function(r){var n=r;n=t.transform(n);var o=t._method?t._method:"PUT";console.log("methodText: "+o);var a=e.Request.builder().url(e.GlobalSettings.getBaseURL()+"substances").method(o).body(n);return e.httpProcess(a).andThen((function(e){return""===e?{valid:!1,message:"Unexpected error from server"}:e}))}))},compute:function(e){return e.full().andThen((function(e){var r=e;return t.transform(r)}))},validate:function(r){return r.full().andThen((function(r){var n=r;n=t.transform(n);var o=e.Request.builder().url(e.GlobalSettings.getBaseURL()+"substances/@validate").method("POST").body(n);return e.httpProcess(o)}))}};return t}},e.ResolveWorker={builder:function(){var t={_list:[],_fetchers:[],_consumer:function(e){},_finisher:function(){},_parameters:[],consumer:function(e){return t._consumer=e,t},list:function(e){return t._list=e,t},fetchers:function(e){return t._fetchers=e,t},finisher:function(e){return t._finisher=e,t},parameters:function(e){return t._parameters=e,t},resolve:function(){var r=_.chain(t._list).filter((function(e){return e.length>0})).map((function(t){var r=e.SubstanceFinder.comprehensiveSubstanceSearch(t);return r._q=t,r})).value(),n=getListener(r.length,(function(){t._finisher()}));_.forEach(r,(function(e){t.process(e,t._fetchers).get((function(e){_.forEach(e,(function(e){t._consumer(e)})),n.decrement()}))}))},process:function(r,n){var o=r._q;return r.andThen((function(e){return e.content})).andThen((function(r){if(r&&r.length>0){var a=_.map(r,(function(r){return t.outputAll(e.SubstanceBuilder.fromSimple(r),n)}));return e.JPromise.join(a).andThen((function(e){return _.map(e,(function(e){return o+"\t"+e}))}))}return e.JPromise.ofScalar([o])}))},outputAll:function(t,r){return e.JPromise.of((function(n){e.FetcherRegistry.getFetchers(r).fetcher(t).get((function(e){n("object"==typeof e?e.join("\t"):e)}))}))}};return t}},e.FetcherMaker={make:function(t,r,n){var o={name:t,tags:[],id:r,fetcher:function(r){return e.JPromise.of((function(e){r.hasOwnProperty("uuid")?n(r).get((function(r){e&&e(r,t)})):r.length>0&&e&&e(r)}))},andThen:function(n){return e.FetcherMaker.make(t,r,(function(e){return o.fetcher(e).andThen(n)}))},addTag:function(e){return o.tags.push(e),o},setDescription:function(e){return o.description=e,o}};return o},makeAPIFetcher:function(t,r,n){var o=r;return o||(o=t),n||(n=r.replace(/[\s\(\)]+/g,"_")),e.FetcherMaker.make(o,n,(function(e){return e.fetch(t)}))},makeScalarFetcher:function(t,r,n){var o=r;return o||(o=t),n||(n=r.replace(/[\s\(\)]+/g,"_")),e.FetcherMaker.make(o,n,(function(r){return e.JPromise.ofScalar(r[t])}))},makeCodeFetcher:function(t,r,n){var o=r;return o||(o=t+"[CODE]"),n||(n=r.replace(/[\s\(\)]+/g,"_")),e.FetcherMaker.make(o,n,(function(e){return e.fetch("codes(codeSystem:"+t+")").andThen((function(e){return _.chain(e).sort((function(e,t){return"PRIMARY"===e.type&&"PRIMARY"!==t.type?-1:"PRIMARY"!==e.type&&"PRIMARY"===t.type?1:0})).map((function(e){return"PRIMARY"!==e.type?e.code+" ["+e.type+"]":e.code})).value().join("; ")}))}))},makeOptionedCodeFetcher:function(t,r,n){var o=t;return o||(o=codeSystem+"[CODE]"),r||(r=t.replace(/[\s\(\)]+/g,"_")),console.log("in makeOptionedCodeFetcher, id: "+r),e.FetcherMaker.make(o,r,(function(e){console.log("in makeOptionedCodeFetcher.make...");var t=r+"_param_codeSystem";console.log("looking for element with ID "+t);var o=document.getElementById(t),a=o.options[o.selectedIndex].value;console.log("codeSystem: "+a),t=r+"_include_comments",console.log("looking for comments element with ID "+t);var i=document.getElementById(t);return n=i.checked,console.log("includeComments: "+n),e.fetch("codes(codeSystem:"+a+")").andThen((function(e){return console.log("cds: "+JSON.stringify(e)),_.chain(e).sort((function(e,t){return"PRIMARY"===e.type&&"PRIMARY"!==t.type?-1:"PRIMARY"!==e.type&&"PRIMARY"===t.type?1:0})).map((function(e){var t="";if(t="PRIMARY"!==e.type?e.code+" ["+e.type+"]":e.code,n){var r=e.codeText;e.codeText||(r="(none)"),t+=" [Comments: "+r+"]"}return t})).value().join("; ")}))})).addTag("optioned")}},e.FetcherRegistry={fetchMap:{},getFetcher:function(t){return e.FetcherRegistry.fetchMap[t]},addFetcher:function(t){return e.FetcherRegistry.fetchMap[t.name]=t,e.FetcherRegistry.fetchers.push(t),e.FetcherRegistry},fetchers:[],nonOrganizingTags:["Tests","optioned","parameterized"],isNonOrganizingTag:function(t){return _.includes(e.FetcherRegistry.nonOrganizingTags,t)||_.startsWith(t.toUpperCase(),"PARAMETERS")},getFetchers:function(t){console.log("getFetchers list:"+t);var r=_.map(t,(function(t){return e.FetcherRegistry.getFetcher(t)}));return e.FetcherRegistry.joinFetchers(r)},joinFetchers:function(t){return e.FetcherMaker.make("Custom","combination",(function(r){var n=_.map(t,(function(e){if(null!=e)return e.fetcher(r)})),o=_.map(t,(function(e){if(null!=e)return e.name}));return e.JPromise.of((function(t){e.JPromise.join(n).get((function(e){t(e,o)}))}))}))},getFetcherTags:function(){var t=[];return _.chain(e.FetcherRegistry.fetchers).map((function(e){return e.tags})).forEach((function(e){_.forEach(e,(function(e){t.push(e)}))})).value(),_.uniq(t)},getFetchersWithTag:function(t){return _.chain(e.FetcherRegistry.fetchers).filter((function(e){return _.indexOf(e.tags,t)>=0})).value()},getFetchersWithNoTag:function(){return _.chain(e.FetcherRegistry.fetchers).filter((function(e){return 0===e.tags.length})).value()}};var t={randomUUID:function(){return t.s4()+t.s4()+"-"+t.s4()+"-"+t.s4()+"-"+t.s4()+"-"+t.s4()+t.s4()+t.s4()},s4:function(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)},isUUID:function(e){return!!(e+"").match(/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/)}};e.UUID=t,e.Request={builder:function(){var e={_method:"GET",skipJson:!1,url:function(t){return e._url=t,e},method:function(t){return e._method=t,e},queryStringData:function(t){return e._q=t,e},body:function(t){return e._b=t,e},setSkipJson:function(t){return e.skipJson=t,e},setContents:function(t){return e.contents=t,e},setContentType:function(t){return e.contentType=t,e}};return e}},e.RequestProcessor={SimpleProcess:function(t){return e.JPromise.of((function(r){var n=t._b,o=t.contentType;console.log("in SimpleProcess, req.skipJson: "+t.skipJson+"; method:"+t._method),n&&!t.skipJson?n=JSON.stringify(n):(n=n||t._q,o="text/plain"),e.GlobalSettings.authenticate(t),console.log("(SimpleProcess going to call url: "+t._url),t._q&&t._q.q&&console.log("   with query: "+t._q.q),console.log("b: "+JSON.stringify(n)),$.ajax({url:t._url,dataType:GlobalSettings.httpType(),contentType:o,type:t._method,data:n,beforeSend:function(e){t.headers&&_.forEach(_.keys(t.headers),(function(r){e.setRequestHeader(r,t.headers[r])}))},success:function(e){console.log("ajax call success "),console.log("\tat "+_.now()),r(e)},error:function(e,t,n){console.log("ajax call error "),console.log("\tat "+_.now()),"object"==typeof e?console.log(JSON.stringify(e)):console.log(e),r(e)}})}))}},e.StructureFinder=e.ResourceFinder.builder().resource("structure").extend((function(t){t.postSmiles=function(t){var r=e.GlobalSettings.getBaseURL(),n=r.lastIndexOf("app/");r=r.substring(0,n+4)+e.GlobalSettings.getStructureUrl(),console.log("postSmiles using URL "+r);var o=e.Request.builder().url(r).method("POST").queryStringData({body:t});return e.httpProcess(o).andThen((function(t){if(e.isJson(t)){var r=JSON.parse(t);return console.log("Parsed object out of JSON"),console.log(" going to return id "+r.structure.id),r.structure.id}return t}))},t.isPossibleInChiKey=function(e){return console.log('isPossibleInChiKey starting with candidate: "'+e+'" length: '+e.length),27===e.length&&"-"===e.charAt(14)&&"-"===e.charAt(25)&&e.match(/^([0-9A-Z\-]+)$/)}})),e.SimpleLookup=e.ResourceFinder.builder().resource("simple").extend((function(t){t.getData=function(t){console.log("starting in getData with url "+t);var r=e.Request.builder().url(t).method("GET").setSkipJson(!0);return e.httpProcess(r).andThen((function(e){return console.log("in lookup.getData, result: "+JSON.stringify(e)),e}))}}));var r={builder:function(){var r={_path:"",_type:""};return r.uuid=t.randomUUID(),r.references=[],r.access=[],r._references=[],r.build=function(){var t=JSON.parse(JSON.stringify(r));return e.gUtil.removeKeysLike(t,/^_/),t},r.setAccess=function(e){return r.access=e,r},r.setProtected=function(){return console.log("setProtected called"),r.access=["protected"],r},r.setPublic=function(e){return e?r:r.setProtected()},r.setPreferred=function(e){return r.preferred=e,r},r.setDeprecated=function(e){return r.deprecated=!!e,r},r.addReference=function(e){if(t.isUUID(e))r.addReferenceUUID(e);else if("reference"===e._type)r._references.push(e),r.addReferenceUUID(e.uuid);else{var n=_.merge(i.builder(),e);r._references.push(n),r.addReferenceUUID(n.uuid)}return r},r.setUuid=function(e){return r.uuid=e,r},r.addReferenceUUID=function(e){return r.references.push(e),r},r.addToPatch=function(e){var t=r.build();return e=e.add(r._path,t),r._references&&r._references.length>0&&_.forEach(r._references,(function(t){console.log("adding one reference, r "+t),e=e.add("/references/-",t.build())})),e},r.mix=function(e){return _.merge(r,e),r},r}},n={bad:/[^ -~\t\n\r]/g,rep:"’;';α;.ALPHA.;β;.BETA.;γ;.GAMMA.;δ;.DELTA.;ε;.EPSILON.;ζ;.ZETA.;η;.ETA.;θ;.THETA.;ι;.IOTA.;κ;.KAPPA.;λ;.LAMBDA.;μ;.MU.;ν;.NU.;ξ;.XI.;ο;.OMICRON.;π;.PI.;ρ;.RHO.;ς;.SIGMA.;σ;.SIGMA.;τ;.TAU.;υ;.UPSILON.;φ;.PHI.;χ;.CHI.;ψ;.PSI.;ω;.OMEGA.;Α;.ALPHA.;Β;.BETA.;Γ;.GAMMA.;Δ;.DELTA.;Ε;.EPSILON.;Ζ;.ZETA.;Η;.ETA.;Θ;.THETA.;Ι;.IOTA.;Κ;.KAPPA.;Λ;.LAMBDA.;Μ;.MU.;Ν;.NU.;Ξ;.XI.;Ο;.OMICRON.;Π;.PI.;Ρ;.RHO.;Σ;.SIGMA.;Τ;.TAU.;Υ;.UPSILON.;Φ;.PHI.;Χ;.CHI.;Ψ;.PSI.;Ω;.OMEGA.;→;->;\\xB1;+/-;±;+/-;←;<-;\\xB2;2;\\xB3;3;\\xB9;1;⁰;0;ⁱ;1;⁲;2;⁳;3;⁴;4;⁵;5;⁶;6;⁷;7;⁸;8;⁹;9;⁺;+;⁻;-;₀;0;₁;1;₂;2;₃;3;₄;4;₅;5;₆;6;₇;7;₈;8;₉;9;₊;+;₋;-;ʟ;L;ᴅ;D".split(";"),map:{},haveSetup:!1,builder:function(){var e=r.builder();return e._type="name",e._path="/names/-",e.type="cn",e.setName=function(t){return e.name=t,e},e.setType=function(t){return e.type=t,e},e.setLanguages=function(t){return e.languages=t,e},e.setDomains=function(t){return e.domains=t,e},e.setNameOrgs=function(t){return e.nameOrgs=t,e},e.setDisplay=function(t){return e.displayName=t,e},e.setup=function(){console.log("in name setup");for(var e=0;e<n.rep.length;e++)if(e%2==0){var t=n.rep[e].charCodeAt(0);n.map[t]=n.rep[e+1]}n.haveSetup=!0},e.replacer=function(e,t){return n.map[t.charCodeAt(0)]},e.standardize=function(t){n.haveSetup||e.setup(),console.log("starting in standardize with input "+t);var r=t;return t&&(r=(r=(r=(r=(r=(r=(r=(r=(r=(r=(r=(r=(r=(r=(r=(r=(r=(r=(r=(r=(r=(r=r.replace(/([\u0390-\u03C9||\u029F||\u1D05||\u2192|\u00B1-\u00B9|\u2070-\u208F|\u2190|\n|\t|\r])/g,e.replacer).trim()).replace(/[[]([A-Z -.]*)\]$/g," !!@!$1_!@!")).replace(/[ \t]+/g," ")).replace(/[[]/g,"(")).replace(/[{]/g,"(")).replace(/\]/g,")")).replace(/\"/g,"''")).replace(/[}]/g,")")).replace(/\(([0-9]*CI,)*([0-9]*CI)\)$/gm,"")).replace(/[ ]*-[ ]*/g,"-")).trim()).replace(/’/g,"'")).replace(/ʹ/g,"'")).replace(/‘/g,"'")).replace(/′/g,"'")).replace(/ʼ/g,"'")).replace(/ʽ/g,"'")).replace(/‛/g,"'")).replace(n.bad,"")).replace("!!@!","[")).replace("_!@!","]")).toUpperCase()),console.log("standardize about return "+r),e.name=r,e},e}},o={builder:function(){var e=r.builder();return e._type="code",e._path="/codes/-",e.type="cn",e.setCode=function(t){return e.code=t,e},e.setType=function(t){return e.type=t,e},e.setCodeSystem=function(t){return e.codeSystem=t,e},e.setCodeComments=function(t){return e.comments=t,e},e.setCodeText=function(t){return e.codeText=t,console.log("setCodeText processing codeText "+t),e},e.setUrl=function(t){return e.url=t,e},e}},a={builder:function(){var e=r.builder();return e.value={},e._type="property",e._path="/properties/-",e.propertyType="PHYSICAL",e.setName=function(t){return e.name=t,e},e.setType=function(t){return e.propertyType=t,e},e.setPropertyStringValue=function(t){return e.value.nonNumericValue=t,console.log("setPropertyStringValue "+t),e},e.setAverage=function(t){return e.value.average=t,e},e.setHigh=function(t){return e.value.high=t,e},e.setLow=function(t){return e.value.low=t,e},e.setUnits=function(t){return e.value.units=t,e},e}},i={builder:function(){var t=r.builder();t._type="reference",t._path="/references/-",t._fileData=null,t._uploadFileUrl=null,t.setCitation=function(e){return t.citation=e,t},t.setUrl=function(e){return t.url=e,t},t.setDocType=function(e){return t.docType=e,t},t.setPublicDomain=function(e){return t.publicDomain=e,t},t.setUploadFileUrl=function(e){return t._uploadFileUrl=e,t},t.setFileData=function(e,r){var n=new FormData;return n.append("file-name",e),_fileData=n,t},t.setUploadedFile=function(e){return t.uploadedFile=e,t},t.processFileData=function(){var t=e.GlobalSettings.getBaseURL(),r=t.indexOf("api");t=t.substring(0,r-1)+"/upload",console.log("url for file upload: "+t);var n=e.Request.builder().url(t);return n.b=_fileData,e.httpProcessFile(n).andThen((function(e){var t=JSON.parse(e);return console.log("upload info: "+e),console.log("  url: "+t.url),setUploadFileUrl(t.url)}))};var n=t.build;return t.build=function(){var e=n();return delete e.references,e},t},isDuplicate:function(e,t,r,n){return e.docType===t&&e.citation===r&&e.url===n}},u={builder:function(){var e=r.builder();return e._type="relationship",e._path="/relationships/-",e.relatedSubstance={},e.type="",e.setType=function(t){return e.type=t,e},e.setRelatedSubstance=function(t){return e.relatedSubstance={refuuid:t.uuid,refPname:t._name},e},e}},s={builder:function(){var e=r.builder();return e._type="note",e._path="/notes/-",e.setNote=function(t){return e.note=t,e},e}};e.CommonData=r,e.Name=n,e.Code=o,e.Reference=i,e.Relationship=u,e.Property=a,e.Note=s;var c={scriptMap:{},addScript:function(e){return c.scriptMap[e.name]=e,c},get:function(e){return c.scriptMap[e]},all:function(){return _.chain(_.keys(c.scriptMap)).map((function(e){return c.scriptMap[e]})).value()}},d={builder:function(){var t={argMap:{},arguments:[],validators:[],validatorParms:[],addArgument:function(e){return"argument"!==e._type&&(e=l.builder().mix(e)),t.arguments.push(e),t.argMap[e.getKey()]=e,t},validForSheetCreation:!0,setKey:function(e){return t.key=e,t},setName:function(e){return t.name=e,t},setDescription:function(e){return t.description=e,t},mix:function(e){return _.merge(t,e),_.forEach(t.arguments,(function(e){t.argMap[e.getKey()]=e})),t},getArgument:function(e){return t.argMap[e]},getArgumentByName:function(e){var r=_.filter(t.arguments,(function(t){return t.name===e}));if(0!==r.length)return r[0]},hasArgumentByName:function(e){return!(void 0===t.getArgumentByName(e))},hasArgument:function(e){return!(void 0===t.getArgument(e))},setExecutor:function(e){return t.executor=e,t},addValidator:function(e,r){return t.validators.push(e),t.validatorParms.push(r),t},useFor:function(e){_.find(t.arguments,{key:"FORCED"})||t.addArgument({key:"FORCED",name:"FORCED",description:"Override of normal validation",required:!1,defaultValue:"FALSE",type:"boolean"}),e(t)},execute:function(r){return e.JPromise.of((function(e){var n=t.executor(r);n&&n._promise?n.get(e):e(n)}))},runner:function(){var r={args:{},clearValues:function(){argSet=this.args,_.forEach(this.args,(function(e,t){argSet[t].value=argSet[t].defaultValue})),this.args=argSet},setValue:function(e,n){if(!t.getArgument(e))throw"No such argument '"+e+"' in script '"+t.name+"'";return r.args[e]=l.builder().mix(t.getArgument(e)).setValue(n),r},setValues:function(e){return _.forEach(_.keys(e),(function(t){r.setValue(t,e[t])})),r},getArguments:function(){var e=[];return _.forEach(_.keys(r.args),(function(t){e.push(r.args[t])})),e}};return _.forEach(t.arguments,(function(e){r.args[e.getKey()]=e})),r.validate=function(){for(var n=_.chain(r.getArguments()).map((function(e){return e.validate(r)})).value(),o=0;o<t.validators.length;o++)n.push(t.validators[o](r.args,t.validatorParms[o]));return e.JPromise.join(n).andThen((function(e){return _.chain(e).filter((function(e){return!e.valid})).value()}))},r.execute=function(){return console.log("About to call cargs.validate"),r.validate().andThen((function(e){return console.log("v: "+JSON.stringify(e)),0===e.length||r.forced()&&!_.filter(e,(function(e){return console.log("item: "+JSON.stringify(e)),e.overall})).length>0?(console.log("About to call scr.execute"),t.execute(r.args).andThen((function(e){return void 0===e.valid?{valid:!0,message:"Success",returned:e}:e}))):{valid:!1,message:_.chain(e).map((function(e){return e.message})).value().join(";")}}))},r.forced=function(){return console.log("cargs.args['FORCED'] "+JSON.stringify(r.args.FORCED)),r.args.FORCED&&r.args.FORCED.value&&("T"===r.args.FORCED.value.charAt(0).toUpperCase()||"Y"===r.args.FORCED.value.charAt(0).toUpperCase())?(console.log("forced returning true"),!0):(console.log("forced returning false"),!1)},r}};return t}},l={builder:function(){var t={_type:"argument"};return t.opPromise=JPromise.ofScalar([]),t.cvType="",t.usedForLookup=!1,t.allowCVOverride=!1,t.setName=function(e){return t.name=e,t},t.getName=function(){return t.name},t.mix=function(e){return _.merge(t,e)},t.validator=function(t){return e.JPromise.ofScalar({valid:!0})},t.setRequired=function(e){return t.required=e,t},t.setAllowCVOverride=function(e){return t.allowCVOverride=e,t},t.setOptions=function(e){return e._promise?t.opPromise=e:t.opPromise=JPromise.ofScalar(e),t},t.getOptions=function(){return t.opPromise},t.getKey=function(){return t.key?t.key:t.name},t.validate=function(r){var n=t.validator(t.getValue(),r);return t.required&&(_.isUndefined(t.getValue())||""===t.getValue())?e.JPromise.ofScalar({valid:!1,message:"Argument '"+t.getName()+"' must be specified"}):"cv"!==t.type||t.allowCVOverride?n:t.opPromise.andThen((function(e){return _.includes(e,t.getValue())?n:(console.log("cv: "+e),{valid:!1,message:"Argument '"+t.getName()+"' has value '"+t.getValue()+"' which is not in the CV"})}))},t.isRequired=function(){return!!t.required||void 0===t.defaultValue},t.setDescription=function(e){return t.description=e,t},t.setType=function(e){return t.type=e,t},t.setValue=function(e){return t.value=e,t},t.setDefault=function(e){return t.defaultValue=e,t},t.getValue=function(){return _.isUndefined(t.value)?t.defaultValue:t.value},t.isYessy=function(){if(_.isUndefined(t.value))return!1;if("boolean"==typeof t.value)return t.value;if("string"==typeof t.value){var e=t.value.toUpperCase();return"YES"===e||"Y"===e||"TRUE"===e||"T"===e}return"number"==typeof t.value&&t.value>0},t.setUsedForLookup=function(e){return t.usedForLookup=e,t},t}};return e.Scripts=c,e.Script=d,e.Argument=l,GSRSAPI.initialize(e),e},initialize:function(e){_.chain(GSRSAPI.extensions).forEach((function(t){t.init(e)}))},addExtension:function(e){GSRSAPI.extensions.push(e)},extensions:[],consoleStack:[]},GGlob=GSRSAPI.builder(),GlobalSettings=GGlob.GlobalSettings,getListener=GGlob.getListener,JPromise=GGlob.JPromise,gUtil=GGlob.gUtil,ResourceFinder=GGlob.ResourceFinder,SubstanceFinder=GGlob.SubstanceFinder,ReferenceFinder=GGlob.ReferenceFinder,SearchRequest=GGlob.SearchRequest,SubstanceBuilder=GGlob.SubstanceBuilder,Patch=GGlob.Patch,ResolveWorker=GGlob.ResolveWorker,FetcherMaker=GGlob.FetcherMaker,FetcherRegistry=GGlob.FetcherRegistry,UUID=GGlob.UUID,Request=GGlob.Request,StructureFinder=GGlob.StructureFinder,RequestProcessor=GGlob.RequestProcessor,Validation={builder:function(){}},CommonData=GGlob.CommonData,Name=GGlob.Name,Code=GGlob.Code,Property=GGlob.Property,Reference=GGlob.Reference,Relationship=GGlob.Relationship,Note=GGlob.Note,Debug={},Scripts=GGlob.Scripts,Script=GGlob.Script,Argument=GGlob.Argument;FetcherRegistry.addFetcher(FetcherMaker.make("Active Moiety PT","",(function(e){return e.fetch("relationships").andThen((function(e){return _.chain(e).filter({type:"ACTIVE MOIETY"}).map((function(e){return e.relatedSubstance.refPname})).value().join("|")}))})).addTag("Substance")),FetcherRegistry.addFetcher(FetcherMaker.make("Active Moiety ID","",(function(e){return e.fetch("relationships").andThen((function(e){return _.chain(e).filter({type:"ACTIVE MOIETY"}).map((function(e){return e.relatedSubstance.approvalID})).value().join("|")}))})).addTag("Substance")),FetcherRegistry.addFetcher(FetcherMaker.make("SMILES","SMILES",(function(e){return e.fetch("structure/smiles")})).addTag("Chemical")),FetcherRegistry.addFetcher(FetcherMaker.make("SMILES+","SMILES_PLUS",(function(e){return e.fetch("structure/smiles").andThen((function(t){return t&&(404===t.status||!1===t.valid||jQuery.isEmptyObject(t))?(console.log("No structure found for substance.  Will look at related"),e.fetch("relationships").andThen((function(e){var t=_.chain(e).filter({type:"SUBSTANCE->SUB_ALTERNATE"}).map((function(e){return console.log("going to fetch substance by "+e.relatedSubstance.refuuid),SubstanceFinder.searchByExactNameOrCode(e.relatedSubstance.refuuid).andThen((function(e){if(e.content&&e.content.length>=1){console.log("looked up substance by UUID");var t=e.content[0];return GGlob.SubstanceBuilder.fromSimple(t).fetch("structure/smiles").andThen((function(e){return console.log("retrieved SMILES "+e),e}))}return console.log("search did not return content"),""}))})).value();return t.length>0?t[0]:""}))):e&&e.structure&&e.structure.smiles?e.structure.smiles:""}))})).addTag("Chemical")),FetcherRegistry.addFetcher(FetcherMaker.make("InChIKey","InChIKey",(function(e){return e.fetch("structure!$inchikey()").andThen((function(e){if(console.log("in InChIKey resolver, id: "+e),!e)return null;if("object"==typeof e)return e.retMsg?e.retMsg:"";if(e.indexOf("=")>-1){var t=e.split("=");return t.length>1?t[1]:null}return e}))})).addTag("Chemical")),FetcherRegistry.addFetcher(FetcherMaker.make("Exact Test","Exact Test",(function(e){return e.fetch("structure/smiles").andThen((function(e){return SubstanceFinder.getExactStructureMatches(e).andThen((function(e){return _.chain(e.content).map((function(e){return e._name})).value().join("|")}))}))})).addTag("Tests")),FetcherRegistry.addFetcher(FetcherMaker.make("Image URL","Image_URL",(function(e){return e.fetch("structure/smiles").andThen((function(t){return t&&!1===t.valid?(console.log("No structure found!"),""):GlobalSettings.getBaseURL().replace(/api.*/g,"")+"img/"+e.uuid+".$IMGFORMAT$?size=300"}))}))),FetcherRegistry.addFetcher(FetcherMaker.make("Protein Sequence","Protein Sequence",(function(e){return e.fetch("protein/subunits!(sequence)!join(;)")})).addTag("Protein")),FetcherRegistry.addFetcher(FetcherMaker.make("UUID","UUID",(function(e){return JPromise.ofScalar(e.uuid)})).addTag("Identifiers")),FetcherRegistry.addFetcher(FetcherMaker.make("Lychi L1","Lychi L1",(function(e){return e.fetch("structure/properties(label:LyChI_L1)($0)/term")})).addTag("Chemical")),FetcherRegistry.addFetcher(FetcherMaker.make("Full Lychi","Full_Lychi",(function(e){return e.fetch("structure/properties").andThen((function(e){return _.chain(e).filter((function(e){return e.label&&e.label.indexOf("LyChI_L")>=0})).sortBy("label").map("term").value().join("-")}))})).addTag("Chemical")),FetcherRegistry.addFetcher(FetcherMaker.make("Substance Class","Substance_Class",(function(e){return JPromise.ofScalar(e.substanceClass)})).addTag("Substance")),FetcherRegistry.addFetcher(FetcherMaker.make("Record Access","Record_Access",(function(e){return JPromise.ofScalar(e.access.join(";"))})).addTag("Record")),FetcherRegistry.addFetcher(FetcherMaker.make("Status","Status",(function(e){return console.log("simpleSub: "+JSON.stringify(e)),JPromise.of((function(t){var r=e.status;"approved"===e.status&&(r="Validated (UNII)"),t(r)}))})).addTag("Record")),FetcherRegistry.addFetcher(FetcherMaker.make("All Names","All_Names",(function(e){return console.log("in all name, simpleSub: "+JSON.stringify(e)),e.fetch?e.fetch("names!(name)!join(!!!)").andThen((function(e){if(console.log("in all names, n: "+typeof e),"string"==typeof e)return e.replace(/!!!/g,"|")})):e})).addTag("Substance")),FetcherRegistry.addFetcher(FetcherMaker.makeCodeFetcher("BDNUM","BDNUM Code").addTag("Identifiers")).addFetcher(FetcherMaker.makeCodeFetcher("WHO-ATC","ATC Code").addTag("Substance")).addFetcher(FetcherMaker.makeCodeFetcher("CAS","CAS Numbers").addTag("Identifiers")).addFetcher(FetcherMaker.makeCodeFetcher("EVMPD","EVMPD Code").addTag("Identifiers")).addFetcher(FetcherMaker.makeCodeFetcher("USAN","USAN Code").addTag("Identifiers")),FetcherRegistry.addFetcher(FetcherMaker.makeOptionedCodeFetcher("General Code Resolver","genericCodes").addTag("Identifiers").addTag("parameters:codeSystem=Administrative Controlled Substances Code Number (ASCN),AIDS,ALANWOOD,ARBITRARY,AUSTRALIAN PLANT NAME INDEX,BDNUM,BIOLOGIC SUBSTANCE CLASSIFICATION CODE,CAS,CERES,CFR,CFSAN PSEUDO CAS,CHEBI,CLINICAL_TRIALS.GOV,CODEX ALIMENTARIUS (GSFA),COSMETIC INGREDIENT REVIEW (CIR),DALTON,DEA NO.,DRUG BANK,EC,EC (ENZYME CLASS),EC SCIENTIFIC COMMITTEE ON CONSUMER SAFETY OPINION,ECHA (EC/EINECS),EDQM (KNOWLEDGE BASE),EINECS,EMA ASSESSMENT REPORTS,EPA PESTICIDE CODE,EU FOOD ADDITIVES,EVMPD,FARM SUBSTANCE ID,FDA UNII,Food Contact Substance Notif, (FCN No.),GENE,GRIN,HEALTH -CANADA NHP INGREDIENT MONOGRAPH,HEALTH-CANADA NHP INGREDIENT RECORD,HSDB,INCB IDS CODE,INN,INS,ITIS,IUPHAR,JECFA EVALUATION,JECFA MONOGRAPH,JMPR-PESTICIDE RESIDUE,KEGG,LIVERTOX,MANUFACTURER PRODUCT INFORMATION,MERCK INDEX,MESH,NCBI TAXONOMY,NCI_THESAURUS,NDF-RT,NDFRT-PE,NSC,PUBCHEM,RXCUI,SWISS_MEDIC-OLD,UCSF-FDA TRANSPORTAL,UNIPROT,USDA PLANTS,USP-MC MONOGRAPH,USP-MC VALIDATION RPT,WEB RESOURCE,WHO INTERNATIONAL PHARMACPOEIA,WHO-ATC,WHO-ESSENTIAL MEDICINES LIST,USAN,WHO-VATC,WIKIPEDIA,ZINC")),FetcherRegistry.addFetcher(FetcherMaker.makeScalarFetcher("_name","Preferred Term").addTag("Substance")).addFetcher(FetcherMaker.makeScalarFetcher("_approvalIDDisplay","Approval ID (UNII)").addTag("Identifiers")).addFetcher(FetcherMaker.makeScalarFetcher("createdBy","Created By").addTag("Record")).addFetcher(FetcherMaker.makeScalarFetcher("created","Created Date").andThen(gUtil.toDate).addTag("Record")).addFetcher(FetcherMaker.makeScalarFetcher("lastEditedBy","Last Edited By").addTag("Record")).addFetcher(FetcherMaker.makeScalarFetcher("lastEdited","Last Edited Date").andThen(gUtil.toDate).addTag("Record")).addFetcher(FetcherMaker.makeScalarFetcher("version","Version").addTag("Record")).addFetcher(FetcherMaker.makeAPIFetcher("structure/formula","Molecular Formula").addTag("Chemical")).addFetcher(FetcherMaker.makeAPIFetcher("structure/molfile","Molfile").addTag("Chemical")),FetcherRegistry.addFetcher(FetcherMaker.make("Molfile+","Molfile_PLUS",(function(e){return e.fetch("structure/molfile").andThen((function(t){if(t&&(404===t.status||!1===t.valid||jQuery.isEmptyObject(t)))return console.log("No structure found for substance.  Will look at related"),e.fetch("relationships").andThen((function(e){var t=_.chain(e).filter({type:"SUBSTANCE->SUB_ALTERNATE"}).map((function(e){return console.log("going to fetch substance by "+e.relatedSubstance.refuuid),SubstanceFinder.searchByExactNameOrCode(e.relatedSubstance.refuuid).andThen((function(e){if(console.log("total responses returned "+e.content.length),e.content&&e.content.length>=1){console.log("looked up substance by UUID");var t=e.content[0];return GGlob.SubstanceBuilder.fromSimple(t).fetch("structure/molfile").andThen((function(e){return console.log("About to return "+e),e}))}return console.log("search did not return content"),""}))})).value();return t.length>0?t[0]:""}));var r="";return e&&e.structure&&e.structure.molfile&&(r=e.structure.molfile),console.log("simpleSub.structure: "+r),r}))})).addTag("Chemical")),FetcherRegistry.addFetcher(FetcherMaker.makeAPIFetcher("structure/mwt","Molecular Weight").addTag("Chemical")),FetcherRegistry.addFetcher(FetcherMaker.make("Equivalence Factor","Equivalence_Factor",(function(e){return e.fetch("structure/mwt").andThen((function(t){return e.fetch("relationships").andThen((function(e){if(console.log("in andThen of relationship fetch. "),e&&e.length&&e.length>0&&e[0].uuid){console.log("fetching r[0].uuid: "+e[0].uuid);var r=_.chain(e).filter({type:"ACTIVE MOIETY"}).map((function(e){return e.relatedSubstance.refuuid})).value()[0];return r&&r.length&&r.length>0?SubstanceFinder.get(r).andThen((function(e){return e.uuid?(console.log("looking for mwt for "+JSON.stringify(e)),e.fetch("structure/mwt").andThen((function(e){return t&&!isNaN(t)&&e&&!isNaN(e)?e/t:""}))):(console.log("ambsub is not a substance"),"")})):(console.log("amuuid undefined"),"")}return console.log("no relationships returned."),""}))}))})).addTag("Chemical")),FetcherRegistry.addFetcher(FetcherMaker.make("Latin Binomial","Latin_Binomial",(function(e){return e.fetch("structurallyDiverse!$select(organismGenus,organismSpecies)!join(%20)").andThen((function(e){return e&&e.length>0&&"null%20null"!==e?e.replace(/%20/g," "):""}))})).addTag("Structurally Diverse")),FetcherRegistry.addFetcher(FetcherMaker.make("Author","Author",(function(e){return e.fetch("structurallyDiverse/organismAuthor")})).addTag("Structurally Diverse")),FetcherRegistry.addFetcher(FetcherMaker.make("Part","Part",(function(e){return e.fetch("structurallyDiverse/part!(term)!join(@@)").andThen((function(e){return e&&e.length>0?e.replace(/@@/g,"|"):""}))})).addTag("Structurally Diverse")),FetcherRegistry.addFetcher(FetcherMaker.make("Stereo Type","Stereo_Type",(function(e){return e.fetch("structure/stereoChemistry")})).addTag("Chemical")),FetcherRegistry.addFetcher(FetcherMaker.make("Record URL","Record_URL",(function(e){return JPromise.ofScalar(GlobalSettings.getHomeURL()+"substance/"+e.uuid)})).addTag("Record")),FetcherRegistry.addFetcher(FetcherMaker.make("Bracket Terms","Bracket_Terms",(function(e){return e.fetch?e.fetch("names!(name)").andThen((function(e){return _.chain(e).filter((function(e){return e.match(/\[.*\]/g)})).value().join("|")})):e})).addTag("Substance")),FetcherRegistry.addFetcher(FetcherMaker.make("Component Report","Component_Report",(function(e){var t=[];return t.push(e.fetch("relationships")),t.push(e.fetch("mixture/components")),GGlob.JPromise.join(t).andThen((function(e){for(var t in console.log("in Components andThen"),e)if(!(e[t].hasOwnProperty("length")&&0===e[t].length||1===e[t].length&&e[t]||e[t].hasOwnProperty("valid")&&!e[t].valid)&&"object"==typeof e[t]&&e[t].length){var r=_.map(e[t],(function(e){var t=[];if(e.substance){var r=e.substance.approvalID?e.substance.approvalID:e.substance.refuuid;t.push("MIXTURE COMPONENT"),t.push(r),t.push(e.substance.name)}else if(e.relatedSubstance&&e.type.toUpperCase().indexOf("CONSTITUENT")>-1){console.log("constituent");var n=e.relatedSubstance.approvalID?e.relatedSubstance.approvalID:e.relatedSubstance.refuuid;t.push(e.type),t.push(n),t.push(e.relatedSubstance.name)}if(t.length>0)return t.join("^")}));if(r&&r.length&&r.length>0)return _.filter(r,(function(e){return e&&e.length&&e.length>0})).join("|")}return""}))})).addTag("Substance")),FetcherRegistry.addFetcher(FetcherMaker.make("Vapor Pressure","Vapor_Pressure",(function(e){return e.fetch("properties").andThen((function(e){return _.chain(e).filter({name:"Vapor pressure"}).map((function(e){return e.value.average+e.value.units})).value()}))})).addTag("Properties")),FetcherRegistry.addFetcher(FetcherMaker.make("Volume of Distribution","Volume_of_Distribution",(function(e){return e.fetch("properties").andThen((function(e){return _.chain(e).filter({name:"Volume of Distribution"}).map((function(e){var t=[];return e.value.low&&t.push("Low: "+e.value.low),e.value.high&&t.push("High: "+e.value.high),e.value.average&&t.push("Average: "+e.value.average),e.value.units&&t.push("Units: "+e.value.units),t.join("; ")})).value()}))})).addTag("Properties"));var CVHelper={getTermList:function(e){return JPromise.of((function(t){GGlob.CVFinder.searchByDomain(e).andThen((function(e){return _.map(e.content[0].terms,(function(e){return e.value}))})).get(t)}))},getDictionary:function(e){return GGlob.CVFinder.searchByDomain(e).andThen((function(t){return"vocabulary:"+e+":"+JSON.stringify(t)}))}};function validate4Params(e,t){var r=!1;console.log("Starting in validate4Params"),t&&"undefined"!==t.RequireCrossValidation&&t.RequireCrossValidation&&(r=!0),console.log("requireCrossValidation: "+r);var n="At least two of these arguments must have values: UUID, PT and BDNUM";return e.uuid.getValue()||e.pt.getValue()||e.bdnum.getValue()?e.uuid.getValue()?(console.log("has UUID"),e.pt.getValue()||e.bdnum.getValue()?GGlob.SubstanceFinder.searchByExactNameOrCode(e.uuid.getValue()).andThen((function(t){if(t.content&&t.content.length>=1){console.log("looked up substance by UUID");var r=t.content[0],n=r.uuid;if(n!==e.uuid.getValue())return console.log("error in validate4Params. uuid from record: '"+n+"' uuid supplied: '"+e.uuid.getValue()+"'"),{valid:!1,message:"The UUID for this record does not match the one provided",overall:!0};var o=r._name;return e.pt.getValue()&&o!==e.pt.getValue()?(console.log("pt: "+o+"; pt from args: "+e.pt.getValue()),{valid:!1,message:"The PT does not match the value for this record",overall:!0}):e.bdnum.getValue()?GGlob.SubstanceBuilder.fromSimple(r).fetch("codes(codeSystem:BDNUM)").andThen((function(t){console.log("after fetching bdnum, result: "+r+"; cds: "+t);var n=!1;return _.forEach(t,(function(t){if(t.code===e.bdnum.getValue())return console.log("looking at bdnum from db: "+t.code+" and from input: "+e.bdnum.getValue()),n=!0,!1})),n?{valid:!0}:{valid:!1,message:"BDNUM does not match value in database",overall:!0}})):{valid:!0}}return{valid:!1,message:"Could not find record with that UUID",overall:!0}})):(console.log("   and no other arg"),r?GGlob.JPromise.of((function(e){e({valid:!1,message:n,overall:!0})})):GGlob.JPromise.of((function(e){e({valid:!0,overall:!0})})))):e.pt.getValue()?r&&!e.bdnum.getValue()?GGlob.JPromise.of((function(e){e({valid:!1,message:n,overall:!0})})):GGlob.SubstanceFinder.searchByExactNameAndCode(e.pt.getValue(),e.bdnum.getValue(),"BDNUM").andThen((function(t){if(console.log(" from searchByExactNameAndCode resp: "+JSON.stringify(t)),t.content&&1===t.content.length){var r=t.content[0];return r._name.toUpperCase()!==e.pt.getValue().toUpperCase()?{valid:!1,message:"The PT of the record does not match the value provided",overall:!0}:e.bdnum.getValue()?(console.log("going to look up BDNum..."),GGlob.SubstanceBuilder.fromSimple(r).fetch("codes(codeSystem:BDNUM)").andThen((function(t){var r=!1;return _.forEach(t,(function(t){if(console.log("looking at bdnum from db: "+t.code+" and from input: "+e.bdnum.getValue()),t.code===e.bdnum.getValue())return r=!0,!1})),r?{valid:!0}:{valid:!1,message:"BDNUM does not match value in database",overall:!0}}))):(console.log("Skipping BDNum look up ..."),{valid:!0})}return t.content&&t.content.length>1?{valid:!1,message:GSRSAPI.MultipleMatchMessage,overall:!0}:(console.log("no results found for search!"),{valid:!1,message:"No substance found with preferred term '"+e.pt.getValue()+"'",overall:!0})})):e.bdnum.getValue()?(console.log("bdnum only"),GGlob.JPromise.of((function(e){if(r)return e({valid:!1,message:n,overall:!0});e({valid:!0})}))):GGlob.JPromise.of((function(e){e({valid:!1,message:"Unexpected result in multiple parameter validator!"})})):(console.log("missing parm(s)"),GGlob.JPromise.of((function(e){var t="At least one of these arguments must have values: UUID, PT and BDNUM";r&&(t=n),e({valid:!1,message:t,overall:!0})})))}function validateOneSubstance(e,t){return console.log("Starting in validateOneSubstance. "),e&&e.getValue()?(console.log("has UUID"),t&&t.getValue()?GGlob.SubstanceFinder.searchByExactNameOrCode(e.getValue()).andThen((function(r){if(r.content&&r.content.length>=1){console.log("looked up substance by UUID");var n=r.content[0];if(n.uuid!==e.getValue())return{valid:!1,message:"The UUID for this record does not match the one provided",overall:!0};var o=n._name;return t&&t.getValue()&&o!==t.getValue()?(console.log("pt: "+o+"; pt from args: "+t.getValue()),{valid:!1,message:"The PT does not match the value for this record",overall:!0}):(console.log(" about to return simple true"),{valid:!0})}return console.log(" about to return simple false"),{valid:!1,message:"Could not find record with UUID "+e.getValue(),overall:!0}})):(console.log("   and no other arg"),GGlob.JPromise.of((function(e){e({valid:!0,overall:!0})})))):t.getValue()?(console.log("has PT"),GGlob.SubstanceFinder.searchByExactNameOrCode(t.getValue()).andThen((function(e){return e.content&&e.content.length>=1?e.content[0]._name!==t.getValue()?{valid:!1,message:"The PT of the record does not match the value provided",overall:!0}:(console.log(" about to return simple true"),{valid:!0,overall:!0}):(console.log(" about to return simple false"),{valid:!1,message:"Could not find record PT "+t.getValue(),overall:!0})}))):GGlob.JPromise.of((function(e){e({valid:!1,message:"One or both of these arguments must have a value: UUID, PT",overall:!0})}))}function validate2Substances(e){console.log("Starting in validate2Substances. ");var t=[];return t.push(validateOneSubstance(e.uuid,e.pt)),t.push(validateOneSubstance(e.uuid2,e.pt2)),GGlob.JPromise.join(t).andThen((function(e){var t=!0,r=[];return _.forEach(e,(function(e){t=t&&e.valid,e.valid||(console.log("adding message "+e.message),r.push(e.message))})),console.log("validate2Substances about to return "+t),t?{valid:!0,overall:!0}:{valid:!1,message:r.join(",")}}))}function validateSubstanceWithStructure(e){return console.log("starting in validateSubstanceWithStructure"),console.log(JSON.stringify(e.molfile)),e.FORCED.isYessy()?(console.log("returning true because FORCED is on"),JPromise.ofScalar({valid:!0,overall:!0})):(structureValue="",!_.isUndefined(e.smiles.getValue())&&e.smiles.getValue().length>0?(console.log("using SMILES"),structureValue=e.smiles.getValue()):!_.isUndefined(e.molfile.getValue())&&e.molfile.getValue().length>0&&(console.log("using molfile"),structureValue=e.molfile.getValue()),""===structureValue?(console.log("no structure; will return valid: true"),JPromise.ofScalar({valid:!0,overall:!0})):(console.log("structureValue: "+structureValue),GGlob.SubstanceFinder.saveTemporaryStructure(structureValue).andThen((function(e){return jQuery.isEmptyObject(e)?{valid:!1,message:"Error processing input structure"}:SubstanceFinder.getExactStructureMatches(e.structure.id).andThen((function(e){return console.log("searchResult: "+JSON.stringify(e)),console.log("searchResult.length: "+e.length),e.length>0||!_.isUndefined(e.content)&&e.content.length>0?(console.log("duplicate(s) detected!"),{valid:!1,message:"Structure has 1 or more duplicates",overall:!0}):{valid:!0}}))}))))}Script.builder().mix({name:"Add Name",description:"Adds a name to a substance record"}).addArgument({key:"uuid",name:"UUID",description:"UUID of the substance record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"pt",name:"PT",description:"Preferred Term of the record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"bdnum",name:"BDNUM",description:"BDNUM of the record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"name",name:"NAME",description:"Name text of the new name",required:!0}).addArgument({key:"name type",name:"NAME TYPE",description:"Category of name",defaultValue:"cn",required:!1,type:"cv",opPromise:CVHelper.getTermList("NAME_TYPE"),cvType:"NAME_TYPE"}).addArgument({key:"standardize",name:"STANDARDIZE",description:"Category of name",defaultValue:"false",required:!1,type:"boolean"}).addArgument({key:"language",name:"LANGUAGE",description:"Language of the new name",defaultValue:"English",required:!1,opPromise:CVHelper.getTermList("LANGUAGE"),type:"cv",cvType:"LANGUAGE"}).addArgument({key:"pd",name:"PD",description:"Public Domain status of the name (sets access for reference as well)",defaultValue:!1,required:!1,type:"boolean"}).addArgument({key:"reference type",name:"REFERENCE TYPE",description:"Type of reference (must match a vocabulary)",defaultValue:"SYSTEM",required:!1,type:"cv",opPromise:CVHelper.getTermList("DOCUMENT_TYPE"),cvType:"DOCUMENT_TYPE"}).addArgument({key:"reference citation",name:"REFERENCE CITATION",description:"Citation text for reference",required:!0}).addArgument({key:"reference file path",name:"REFERENCE FILE PATH",description:"A file to attach to the reference",required:!1}).addArgument({key:"reference url",name:"REFERENCE URL",description:"URL for the reference",required:!1}).addArgument({key:"change reason",name:"CHANGE REASON",defaultValue:"Added Name",description:"Text for the record change",required:!1}).addValidator(validate4Params,null).setExecutor((function(e){var t=e.uuid.getValue(),r=e.pt.getValue(),n=e.bdnum.getValue(),o=e.name.getValue(),a=e["name type"].getValue(),i=e.pd.isYessy(),u=e["reference type"].getValue(),s=e["reference citation"].getValue(),c=e["reference url"].getValue(),d=e.language.getValue(),l=e["reference file path"].getValue(),g=Reference.builder().mix({citation:s,docType:u});console.log("referenceUrl: "+c),c&&c.length>0&&(g=g.setUrl(c)),console.log("referenceFilePath: "+l),l&&l.length>0&&(g.setUploadedFile(l),console.log("adding uploaded file to reference")),console.log("dataPublic: "+i),i?(console.log("perceived public reference"),g.setPublic(!0),g.setPublicDomain(!0)):(console.log("perceived NON public reference"),g.setPublic(!1),g.setPublicDomain(!1));var f=[];f.push(d);var p=Name.builder().setName(o).setType(a).setPublic(i).setLanguages(f);return e.standardize.isYessy()&&(p=p.standardize(o)),t&&0!==t.length||r&&r.length>0||console.log("using bdnum "+n),GGlob.SubstanceFinder.comprehensiveSubstanceSearchByArgs(e).andThen((function(t){var r;if(console.log("in add name script, search returned s: "+JSON.stringify(t)),!t.hasOwnProperty("content"))return t;var n=t.content[0];return"string"==typeof(r=GGlob.SubstanceBuilder.fromSimple(n))?(console.log("detected string; returning false"),{message:r,valid:!1}):r.fetch("references").andThen((function(e){return _.forEach(e,(function(e){if(Reference.isDuplicate(e,u,s,c))return console.log("Duplicate reference found! Will skip creation of new one."),g=e,!1})),p.addReference(g),r})).andThen((function(t){return r.patch().addData(p).add("/changeReason",e["change reason"].getValue()).apply().andThen(_.identity)}))}))})).useFor((function(e){Scripts.addScript(e)})),Script.builder().mix({name:"Add Code",description:"Adds a code to a substance record"}).addArgument({key:"uuid",name:"UUID",description:"UUID of the substance record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"pt",name:"PT",description:"Preferred Term of the record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"bdnum",name:"BDNUM",description:"BDNUM of the record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"code",name:"CODE",description:"Actual code for the new item",required:!0}).addArgument({key:"code system",name:"CODE SYSTEM",description:"Code system of the new code",required:!0,opPromise:CVHelper.getTermList("CODE_SYSTEM"),type:"cv",cvType:"CODE_SYSTEM"}).addArgument({key:"code type",name:"CODE TYPE",description:"Code type of code. For instance, whether it's a primary code",defaultValue:"PRIMARY",required:!1,opPromise:CVHelper.getTermList("CODE_TYPE"),type:"cv",cvType:"CODE_TYPE"}).addArgument({key:"code text",name:"CODE TEXT",description:"Free text",required:!1}).addArgument({key:"comments",name:"COMMENTS",description:"Description for the new code (free text)",required:!1}).addArgument({key:"code url",name:"CODE URL",description:"URL to evaluate this code (this is distinct from the reference URL)",required:!1}).addArgument({key:"allow multiples",name:"ALLOW MULTIPLES",description:"Allow the entry of multiple codes within the same code system",defaultValue:!1,required:!1,type:"boolean"}).addArgument({key:"pd",name:"PD",description:"Public Domain status of the code (sets access for reference as well)",defaultValue:!1,required:!1,type:"boolean"}).addArgument({key:"reference type",name:"REFERENCE TYPE",description:"Type of reference (must match a vocabulary)",defaultValue:"SYSTEM",required:!1,type:"cv",opPromise:CVHelper.getTermList("DOCUMENT_TYPE"),cvType:"DOCUMENT_TYPE"}).addArgument({key:"reference citation",name:"REFERENCE CITATION",description:"Citation text for reference",required:!1}).addArgument({key:"reference file path",name:"REFERENCE FILE PATH",description:"A file to attach to the reference",required:!1}).addArgument({key:"reference url",name:"REFERENCE URL",description:"URL for the reference",required:!1}).addArgument({key:"replace existing",name:"REPLACE EXISTING",description:"when codes are found from the same system, delete what was there before adding this",defaultValue:!1,required:!1,type:"boolean"}).addArgument({key:"change reason",name:"CHANGE REASON",defaultValue:"Added Code",description:"Text for the record change",required:!1}).addValidator(validate4Params,null).setExecutor((function(e){var t=e.uuid.getValue(),r=e.pt.getValue(),n=e.bdnum.getValue(),o=e.code.getValue(),a=e["code type"].getValue(),i=e["code system"].getValue(),u=e.comments.getValue(),s=e["code text"].getValue(),c=e["allow multiples"].isYessy(),d=e["code url"].getValue(),l=e.pd.isYessy(),g=e["reference type"].getValue(),f=e["reference citation"].getValue(),p=e["reference url"].getValue(),m=e["replace existing"].isYessy(),h=e["reference file path"].getValue();console.log("referenceFilePath: "+h);var y=[],S=[],v=Reference.builder().mix({citation:f,docType:g});p&&p.length>0&&(v=v.setUrl(p)),l?(v.setPublic(!0),v.setPublicDomain(!0)):(v.setPublic(!1),v.setPublicDomain(!1)),h&&h.length>0&&(v.setUploadedFile(h),console.log("adding uploaded file to reference")),console.log("Creating code using codeInput "+o+"; codeSystem "+i+"; codeText "+s+"; and comments: "+u);var b=Code.builder().setCode(o).setType(a).setCodeSystem(i).setPublic(l);d&&b.setUrl(d),u&&b.setCodeText(u),s&&b.setCodeComments(s);var T=t;return t&&0!==t.length||(r&&r.length>0?(console.log("using pt for lookup"),T=r):T=n),GGlob.SubstanceFinder.comprehensiveSubstanceSearchByArgs(e).andThen((function(t){if(!t||!t.content||0===t.content.length)return console.log("no results found for query of "+T),{valid:!1,message:"Error looking up record for "+T};var r=t.content[0],n=GGlob.SubstanceBuilder.fromSimple(r);return"string"==typeof n?{valid:!1,message:r}:n.fetch("references").andThen((function(e){console.log("retrieved refs"),_.forEach(e,(function(e){if(Reference.isDuplicate(e,g,f,p))return console.log("Duplicate reference found! Will skip creation of new one."),v=e,!1})),b.addReference(v)})).andThen((function(t){return n.fetch("codes").andThen((function(t){var n=!0,a="";if(m&&(t=_.forEachRight(t,(function(e,t){e.codeSystem===i&&e.code===o&&(console.log("adding code at index "+t+" to list"),y.push(t),S.push(e.uuid))}))),y.length>1)return console.log(" multiple codes that match input detected"),n=!1,a='This substance already has more than one code that match code "'+o+'" for system '+cd.codeSystem,!1;if(_.forEach(t,(function(e){if(e.codeSystem===i)if(c&&!m){if(e.code==o)return console.log(" duplicate code detected"),n=!1,a='This substance already has the code "'+o+'" for system '+e.codeSystem,!1}else if(!m)return console.log("detected duplicate"),n=!1,a="This substance already has a code for system "+e.codeSystem,!1})),n){console.log("Add Code is going to return patch ");var u=r.patch();return _.forEach(S,(function(e){u.appendTransform((function(t){return _.remove(t.codes,(function(t){return t.uuid===e})),t}))})),console.log("codePatch: "+JSON.stringify(u)),u.addData(b).add("/changeReason",e["change reason"].getValue()).apply().andThen(_.identity)}return console.log("Add Code is going to return message "+a),{message:a,valid:!1}}))}))}))})).useFor(Scripts.addScript),Script.builder().mix({name:"Add Relationship",description:"Adds a relationship to a substance record"}).addArgument({key:"uuid",name:"UUID",description:"UUID of the (primary) substance record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"pt",name:"PT",description:"Preferred Term of the primary record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"uuid2",name:"UUID2",description:"UUID of the (secondary) substance record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"pt2",name:"PT2",description:"Preferred Term of the secondary record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"relationship type",name:"RELATIONSHIP TYPE",description:"Type of the new relationship",type:"cv",required:!0,opPromise:CVHelper.getTermList("RELATIONSHIP_TYPE"),cvType:"RELATIONSHIP_TYPE"}).addArgument({key:"reference type",name:"REFERENCE TYPE",description:"Type of reference (must match a vocabulary)",defaultValue:"SYSTEM",required:!1,opPromise:CVHelper.getTermList("DOCUMENT_TYPE"),type:"cv",cvType:"DOCUMENT_TYPE"}).addArgument({key:"reference citation",name:"REFERENCE CITATION",description:"Citation text for reference",required:!1}).addArgument({key:"reference url",name:"REFERENCE URL",description:"URL for the reference",required:!1}).addArgument({key:"reference tags",name:"REFERENCE TAGS",description:"pipe-delimited set of tags for the reference",required:!1}).addArgument({key:"pd",name:"PD",description:"Public Domain status of the relationship (sets access for reference as well)",defaultValue:!1,required:!1,type:"boolean"}).addArgument({key:"change reason",name:"CHANGE REASON",defaultValue:"Added Code",description:"Text for the record change",required:!1}).addValidator(validate2Substances,null).setExecutor((function(e){e.uuid.getValue();var t=e.uuid2.getValue(),r=(e.pt.getValue(),e.pt2.getValue()),n=e["relationship type"].getValue();console.log("got relationshiptype: "+n);var o=e.pd.isYessy(),a=e["reference type"].getValue(),i=e["reference citation"].getValue(),u=e["reference url"].getValue(),s=e["reference tags"].getValue();console.log("got remaining parms ");var c,d=null;if(a&&i&&(d=Reference.builder().mix({citation:i,docType:a}),u&&u.length>0&&(d=d.setUrl(u)),o?(d.setPublic(!0),d.setPublicDomain(!0)):(d.setPublic(!1),d.setPublicDomain(!1)),s&&s.length>0)){var l=s.split("|"),g=[];_.forEach(l,(function(e){g.push(e)})),d.tags=g}return GGlob.SubstanceFinder.comprehensiveSubstanceSearchByArgs(e).andThen((function(e){var t=e.content[0];return"string"==typeof(c=GGlob.SubstanceBuilder.fromSimple(t))?{valid:!1,message:c}:(console.log("going to check references"),c.fetch("references").andThen((function(e){console.log("retrieved refs: "+JSON.stringify(e)),_.forEach(e,(function(e){if(Reference.isDuplicate(e,a,i,u))return console.log("Duplicate reference found! Will skip creation of new one."),d=e,!1}))})))})).andThen((function(o){if(console.log("in andThen 2"),"string"==typeof c)return{valid:!1,message:c+" (first substance)"};var a=t||r;return GGlob.SubstanceFinder.comprehensiveSubstanceSearch(a).andThen((function(t){console.log("in andThen 2 inner ");var r=t.content[0],o=GGlob.SubstanceBuilder.fromSimple(r);if("string"==typeof o)return{valid:!1,message:o+" (second substance)"};var a=Relationship.builder().setRelatedSubstance(o).setType(n);return d&&a.addReference(d),c.patch().addData(a).add("/changeReason",e["change reason"].getValue()).apply().andThen(_.identity)}))}))})).useFor(Scripts.addScript),Script.builder().mix({name:"Replace Code",description:"Replaces one code with another of the same type for a substance record identified by preferred term. Matches code ONLY by code system!"}).addArgument({key:"uuid",name:"UUID",description:"UUID of the substance record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"pt",name:"PT",description:"Preferred Term of the record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"bdnum",name:"BDNUM",description:"BDNUM of the record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"code",name:"CODE",description:"Actual code for the new item",required:!0}).addArgument({key:"code system",name:"CODE SYSTEM",description:"Code system for the old and new codes",required:!0,opPromise:CVHelper.getTermList("CODE_SYSTEM"),type:"cv",cvType:"CODE_SYSTEM"}).addArgument({key:"code type",name:"CODE TYPE",description:"Code type of code. For instance, primary",defaultValue:"PRIMARY",required:!1,opPromise:CVHelper.getTermList("CODE_TYPE"),type:"cv",cvType:"CODE_TYPE"}).addArgument({key:"code text",name:"CODE TEXT",description:"Free text",required:!1}).addArgument({key:"comments",name:"COMMENTS",description:"Description new/replacement code",required:!1}).addArgument({key:"code url",name:"CODE URL",description:"URL to evaluate this code (this is distinct from the reference URL)",required:!1}).addArgument({key:"pd",name:"PD",description:"Public Domain status of the code (sets access for reference as well)",defaultValue:!1,required:!1,type:"boolean"}).addArgument({key:"reference type",name:"REFERENCE TYPE",description:"Type of reference (must match a vocabulary)",defaultValue:"SYSTEM",required:!1,opPromise:CVHelper.getTermList("DOCUMENT_TYPE"),type:"cv",cvType:"DOCUMENT_TYPE"}).addArgument({key:"reference citation",name:"REFERENCE CITATION",description:"Citation text for reference",required:!1}).addArgument({key:"reference url",name:"REFERENCE URL",description:"URL for the reference",required:!1}).addArgument({key:"reference tags",name:"REFERENCE TAGS",description:"pipe-delimited set of tags for the reference",required:!1}).addArgument({key:"change reason",name:"CHANGE REASON",defaultValue:"Updated Code",description:"Text for the record change",required:!1}).addValidator(validate4Params,{RequireCrossValidation:!0}).setExecutor((function(e){var t=e.uuid.getValue(),r=e.bdnum.getValue(),n=e.pt.getValue(),o=e.code.getValue(),a=e["code type"].getValue(),i=e["code system"].getValue(),u=e.comments.getValue(),s=e["code text"].getValue(),c=e["code url"].getValue(),d=e.pd.isYessy(),l=e["reference type"].getValue(),g=e["reference citation"].getValue(),f=e["reference url"].getValue(),p=null,m=e["reference tags"].getValue();if(l&&l.length>0&&g&&g.length>0&&(p=(p=Reference.builder().mix({citation:g,docType:l})).setUrl(f),d?(p.setPublic(!0),p.setPublicDomain(!0)):(p.setPublic(!1),p.setPublicDomain(!1)),m&&m.length>0)){var h=m.split("|"),y=[];_.forEach(h,(function(e){y.push(e)})),p.tags=y}var S=Code.builder().setCode(o).setType(a).setCodeSystem(i).setPublic(d);s&&S.setCodeComments(s),u&&S.setCodeText(u),console.log("code object: "+JSON.stringify(S)),c&&S.setUrl(c);var v=t;return t&&0!==t.length||(n&&n.length>0?(console.log("using pt"),v=n):(console.log("using bdnum "+r),v=r)),console.log("lookupCriterion: "+v),GGlob.SubstanceFinder.comprehensiveSubstanceSearchByArgs(e).andThen((function(t){if(t.content&&t.content.length>=1){var r=t.content[0],o=GGlob.SubstanceBuilder.fromSimple(r);if("string"==typeof o)return{valid:!1,message:o};console.log("Found a substance with PT: "+n);var a=!0;return o.fetch("codes").andThen((function(t){return o.fetch("references").andThen((function(n){for(var o="",u=0,s=0;s<t.length;s++)t[s].codeSystem===i&&(o=t[s].uuid,u++);if(console.log("in Replace Code script, located "+u+" codes for system "+i),0===u)return{message:"Error locating code for system '"+i+".'",valid:!1};if(u>1)return{message:"Error! More than one code for system '"+i+"' has been found.",valid:!1};if(_.forEach(n,(function(e){if(Reference.isDuplicate(e,l,g,f))return console.log("Duplicate reference found! Will skip creation of new one. type: "+l+"; citation: "+g),p=e,a=!1,!1})),p&&S.addReference(p),console.log("codeUuidToReplace: "+o),o.length>0){S.setUuid(o);var c=r.patch();return c.appendTransform((function(e){for(var t=0;t<e.codes.length;t++)e.codes[t].uuid===o&&(console.log("going to replace code at pos "+t),e.codes[t]=S);return e})),a&&p&&(c.addData(p),console.log("added ref to patch")),c.add("/changeReason",e["change reason"].getValue()).apply().andThen(_.identity)}return{message:"Error locating code to replace",valid:!1}}))}))}return console.log("Did not locate substance based on "+n),{message:"Did not locate substance based on "+n,valid:!1}}))})).useFor(Scripts.addScript),Script.builder().mix({name:"Replace Code Text",description:"Replaces the text (comment) of one code for a substance record identified by preferred term"}).addArgument({key:"uuid",name:"UUID",description:"UUID of the substance record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"pt",name:"PT",description:"Preferred Term of the record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"bdnum",name:"BDNUM",description:"BDNUM of the record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"code",name:"CODE",description:"Existing code to match",required:!0}).addArgument({key:"code system",name:"CODE SYSTEM",description:"Code system to match",opPromise:CVHelper.getTermList("CODE_SYSTEM"),type:"cv",cvType:"CODE_SYSTEM"}).addArgument({key:"code type",name:"CODE TYPE",description:"Code type of code. For instance, primary",defaultValue:"PRIMARY",required:!1,opPromise:CVHelper.getTermList("CODE_TYPE"),type:"cv",cvType:"CODE_TYPE"}).addArgument({key:"comments",name:"COMMENTS",description:"Updated description/comments for the code",required:!1}).addArgument({key:"code url",name:"CODE URL",description:"URL to evaluate this code (this is distinct from the reference URL)",required:!1}).addArgument({key:"pd",name:"PD",description:"Public Domain status of the code (sets access for reference as well)",defaultValue:!1,required:!1,type:"boolean"}).addArgument({key:"reference type",name:"REFERENCE TYPE",description:"Type of reference (must match a vocabulary)",defaultValue:"SYSTEM",required:!1,opPromise:CVHelper.getTermList("DOCUMENT_TYPE"),type:"cv",cvType:"DOCUMENT_TYPE"}).addArgument({key:"reference citation",name:"REFERENCE CITATION",description:"Citation text for reference",required:!1}).addArgument({key:"reference url",name:"REFERENCE URL",description:"URL for the reference",required:!1}).addArgument({key:"reference tags",name:"REFERENCE TAGS",description:"pipe-delimited set of tags for the reference",required:!1}).addArgument({key:"change reason",name:"CHANGE REASON",defaultValue:"Updated Code",description:"Text for the record change",required:!1}).addValidator(validate4Params,{RequireCrossValidation:!0}).setExecutor((function(e){var t=e.pt.getValue(),r=e.uuid.getValue(),n=e.bdnum.getValue(),o=e.code.getValue(),a=e["code type"].getValue(),i=e["code system"].getValue(),u=e.comments.getValue(),s=e["code url"].getValue(),c=e.pd.isYessy(),d=e["reference type"].getValue(),l=e["reference citation"].getValue(),g=e["reference url"].getValue(),f=null,p=e["reference tags"].getValue();if(d&&d.length>0&&l&&l.length>0&&(f=(f=Reference.builder().mix({citation:l,docType:d})).setUrl(g),c?(f.setPublic(!0),f.setPublicDomain(!0)):(f.setPublic(!1),f.setPublicDomain(!1)),p&&p.length>0)){var m=p.split("|"),h=[];_.forEach(m,(function(e){h.push(e)})),f.tags=h}var y=Code.builder().setCode(o).setType(a).setCodeSystem(i).setCodeComments(u).setPublic(c);return s&&y.setUrl(s),u&&y.setCodeText(u),r&&0!==r.length||t&&t.length>0||console.log("using bdnum "+n),GGlob.SubstanceFinder.comprehensiveSubstanceSearchByArgs(e).andThen((function(r){if(r.content&&r.content.length>=1){var n=r.content[0],a=GGlob.SubstanceBuilder.fromSimple(n);return"string"==typeof a?{valid:!1,message:a}:(console.log("Found a substance with PT: "+t),a.fetch("codes").andThen((function(t){return a.fetch("references").andThen((function(r){var a="";_.forEach(r,(function(e){if(Reference.isDuplicate(e,d,l,g))return console.log("Duplicate reference found! Will skip creation of new one."),f=null,!1})),f&&y.addReference(f);for(var u=0;u<t.length;u++)if(t[u].codeSystem===i&&t[u].code===o){l&&0!==l.length||(console.log("Copying ref "+JSON.stringify(t[u].references)),y.references=t[u].references),a=t[u].uuid;break}if(a.length>0){console.log("going to update code with uuid "+a);var s=n.patch();return s.appendTransform((function(e){for(var t=0;t<e.codes.length;t++)e.codes[t].uuid===a&&(console.log("going to replace code at pos "+t),e.codes[t]=y);return e})),f&&(console.log("Adding reference to patch"),s.addData(f)),s.add("/changeReason",e["change reason"].getValue()).apply().andThen(_.identity)}return{message:"Error locating code to replace",valid:!1}}))})))}return console.log("Did not locate substance based on "+t),{message:"Did not locate substance based on "+t,valid:!1}}))})).useFor(Scripts.addScript),Script.builder().mix({name:"Replace Code Type",description:"Replaces the type ('PRIMARY,' 'ALTERNATIVE', 'GENERIC (FAMILY)'..) of a code for a substance record"}).addArgument({key:"uuid",name:"UUID",description:"UUID of the substance record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"pt",name:"PT",description:"Preferred Term of the record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"bdnum",name:"BDNUM",description:"BDNUM of the record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"code",name:"CODE",description:"Actual code for item to match",required:!0,usedForLookup:!1}).addArgument({key:"code system",name:"CODE SYSTEM",description:"Code system of the existing code to match",required:!0,opPromise:CVHelper.getTermList("CODE_SYSTEM"),type:"cv",cvType:"CODE_SYSTEM",usedForLookup:!1}).addArgument({key:"code type",name:"CODE TYPE",description:"New type for the code. For instance, GENERIC",required:!0,opPromise:CVHelper.getTermList("CODE_TYPE"),type:"cv",cvType:"CODE_TYPE",usedForLookup:!1}).addArgument({key:"change reason",name:"CHANGE REASON",defaultValue:"Added Code",description:"Text for the record change",required:!1,usedForLookup:!1}).addValidator(validate4Params,{RequireCrossValidation:!0}).setExecutor((function(e){var t=e.uuid.getValue(),r=e.pt.getValue(),n=e.bdnum.getValue(),o=e.code.getValue(),a=e["code type"].getValue(),i=e["code system"].getValue(),u=[];console.log("Looking for code "+o+" of codeSystem "+i);var s=t;return t&&0!==t.length||(r&&r.length>0?(console.log("using pt for lookup"),s=r):s=n),GGlob.SubstanceFinder.comprehensiveSubstanceSearchByArgs(e).andThen((function(t){if(!t||!t.content||0===t.content.length)return console.log("no results found for query of "+s),{valid:!1,message:"Error looking up record for "+s};var r=t.content[0],n=GGlob.SubstanceBuilder.fromSimple(r);return"string"==typeof n?{valid:!1,message:n}:n.fetch("references").andThen((function(t){return n.fetch("codes").andThen((function(t){if(t=_.forEachRight(t,(function(e,t){if(e.codeSystem===i&&e.code===o){console.log("located code at index "+t+" to change type "+a);var r=Code.builder().setCode(o).setType(a).setCodeSystem(i).setCodeComments(e.comments).setPublic(e.public).setUrl(e.url).setUuid(e.uuid).setAccess(e.access);_.forEach(e.references,(function(e){r.addReference(e)})),u.push(r)}})),u.length>0){console.log("Replace Code Type is going to return patch ");var n=r.patch();return _.forEach(u,(function(e){n.appendTransform((function(t){console.log("inside transform");for(var r=0;r<t.codes.length;r++)t.codes[r].uuid===e.uuid&&(console.log("going to replace code at pos "+r),t.codes[r]=e);return t}))})),console.log("codePatch: "+JSON.stringify(n)),n.add("/changeReason",e["change reason"].getValue()).apply().andThen(_.identity)}return console.log("Replace Code Type is going to return message "),{message:"",valid:!1}}))}))}))})).useFor(Scripts.addScript),Script.builder().mix({name:"Remove Name",description:"Removes a name from a substance record"}).addArgument({key:"uuid",name:"UUID",description:"UUID of the substance record (used for lookup/validation)",usedForLookup:!0}).addArgument({key:"pt",name:"PT",description:"Preferred Term of the record (used for lookup/validation)",usedForLookup:!0}).addArgument({key:"bdnum",name:"BDNUM",description:"BDNUM of the record (used for lookup/validation)",usedForLookup:!0}).addArgument({key:"name",name:"NAME",description:"Text of the name to delete",required:!0,validator:function(e){return console.log("starting in validator for arg name"),GGlob.SubstanceFinder.searchByExactName(e).andThen((function(t){return console.log("in andThen for validator"),t.content&&t.content.length<1?{valid:!1,message:"The name '"+e+"' was not found in the database. "}:{valid:!0}}))}}).addArgument({key:"case-sensitive",name:"CASE SENSITIVE",defaultValue:!1,description:"Compare names considering text case?",required:!1}).addArgument({key:"change reason",name:"CHANGE REASON",defaultValue:"Delete Name",description:"Text for the record change log",required:!1}).addValidator(validate4Params,{RequireCrossValidation:!0}).setExecutor((function(e){var t,r=e.uuid.getValue(),n=e.pt.getValue(),o=e.bdnum.getValue(),a=e.name.getValue(),i=r;r&&0!==r.length||(i=n&&n.length>0?n:o);var u=e["case-sensitive"].getValue();return console.log("lookupCriterion = "+i),GGlob.SubstanceFinder.comprehensiveSubstanceSearchByArgs(e).andThen((function(e){if(e.content&&e.content.length>=1){console.log("looked up substance successfully");var r=e.content[0];return substance=GGlob.SubstanceBuilder.fromSimple(r),"string"==typeof substance?{valid:!1,message:substance}:(t=substance,substance.full())}return{valid:!1,message:"Error looking up substance"}})).andThen((function(r){var n=-1,o=a;u||(o=o.toUpperCase());for(var i=0;i<r.names.length;i++){var s=r.names[i].name;if(u||(s=s.toUpperCase()),s===o){n=i;break}}return n<=-1?{valid:!1,message:"Unable to locate name to delete: "+a}:t.patch().remove("/names/"+n).add("/changeReason",e["change reason"].getValue()).apply().andThen((function(e){return e}))}))})).useFor((function(e){Scripts.addScript(e)})),Script.builder().mix({name:"Remove Code",description:"Removes a single code from a substance record. Note: this method makes changes to existing records"}).addArgument({key:"uuid",name:"UUID",description:"UUID of the substance record (used for lookup/validation)",usedForLookup:!0}).addArgument({key:"pt",name:"PT",description:"Preferred Term of the record (used for lookup/validation)",usedForLookup:!0}).addArgument({key:"bdnum",name:"BDNUM",description:"BDNUM of the record (used for lookup/validation)",usedForLookup:!0}).addArgument({key:"code",name:"CODE",description:"Code value of the code to delete",required:!0}).addArgument({key:"code system",name:"CODE SYSTEM",description:"Code system of the code to delete"}).addArgument({key:"change reason",name:"CHANGE REASON",defaultValue:"Delete Name",description:"Text for the record change log",required:!1}).addValidator(validate4Params,{RequireCrossValidation:!0}).setExecutor((function(e){var t,r=e.uuid.getValue(),n=e.pt.getValue(),o=e.bdnum.getValue(),a=e.code.getValue(),i=e["code system"].getValue();console.log("Looking for codeToRemove: "+a+"; codeSystemToRemove: "+i);var u=r;return r&&0!==r.length||(u=n&&n.length>0?n:o),console.log("lookupCriterion = "+u),GGlob.SubstanceFinder.comprehensiveSubstanceSearchByArgs(e).andThen((function(e){if(e.content&&e.content.length>=1){console.log("looked up substance successfully");var r=e.content[0];return substance=GGlob.SubstanceBuilder.fromSimple(r),"string"==typeof substance?{valid:!1,message:substance}:(t=substance,substance.full())}return{valid:!1,message:"Error looking up substance"}})).andThen((function(r){var n="";console.log("total codes: "+r.codes.length);for(var o=0;o<r.codes.length;o++)if(r.codes[o].code===a&&r.codes[o].codeSystem===i){n=r.codes[o].uuid,console.log("looking to remove code with UUID "+n);break}if(0===n.length)return{valid:!1,message:"Unable to locate code to delete: "+i+"."+a};var u=t.patch();return u.appendTransform((function(e){return console.log("inside transform looking for code that matches "+n+" total before: "+e.codes.length),_.remove(e.codes,(function(e){return e.uuid===n})),console.log(" total after: "+e.codes.length),e})),u.add("/changeReason",e["change reason"].getValue()).apply().andThen((function(e){return e}))}))})).useFor((function(e){Scripts.addScript(e)})),Script.builder().mix({name:"Fix Code URLs",description:"Replaces the URL associated with a code on a substance record when a code of that type already exists"}).addArgument({key:"uuid",name:"UUID",description:"UUID of the substance record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"pt",name:"PT",description:"Preferred Term of the substance record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"bdnum",name:"BDNUM",description:"BDNUM of the record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"code system",name:"CODE SYSTEM",description:"Code system to modify",required:!0,defaultValue:"CAS"}).addArgument({key:"url base",name:"URL BASE",defaultValue:"Stem for the formation of URLs, with Code to be appended",description:"Text for the record change",required:!0}).addArgument({key:"change reason",name:"CHANGE REASON",defaultValue:"Fixing Code URLs",description:"Text for the record change",required:!1}).addValidator(validate4Params,{RequireCrossValidation:!0}).setExecutor((function(e){e.uuid.getValue();var t=e["code system"].getValue(),r=(e.pt.getValue(),e["url base"].getValue());return e.bdnum.getValue(),GGlob.SubstanceFinder.comprehensiveSubstanceSearchByArgs(e).andThen((function(e){if(!e||!e.content||0===e.content.length)return{valid:!1,message:"search for "+searchCrit+" returned no records"};var t=e.content[0];return s0=GGlob.SubstanceBuilder.fromSimple(t),"string"==typeof s0?{valid:!1,message:s0}:s0?s0.full():{valid:!1,message:"unexpected error"}})).andThen((function(n){if(console.log("Starting in second andThen"),!1===n.valid)return n;console.log("Looking at codes collection which has "+n.codes.length);var o=[],a=[];if(_.forEach(n.codes,(function(e,n){e.codeSystem===t&&(e.url=r+e.code,o.push(e),a.push(n))})),0===o.length)return{valid:!1,message:"code system '"+t+"' not matched"};var i=s0.patch();return _.forEach(o,(function(e,t){i.appendTransform((function(t){console.log("inside transform");for(var r=0;r<t.codes.length;r++)t.codes[r].uuid===e.uuid&&(console.log("going to replace code at pos "+r),t.codes[r]=e);return t}))})),i.add("/changeReason",e["change reason"].getValue()).apply().andThen((function(e){return e}))}))})).useFor((function(e){Scripts.addScript(e)})),Script.builder().mix({name:"Set Object JSON",description:"Replace an entire record based on JSON read in"}).addArgument({key:"uuid",name:"UUID",description:"UUID of the substance record (used for lookup/validation)",required:!0,usedForLookup:!0}).addArgument({key:"pt",name:"PT",description:"Preferred Term of the record (used for lookup/validation)",usedForLookup:!0}).addArgument({key:"bdnum",name:"BDNUM",description:"BDNUM of the record (used for lookup/validation)",usedForLookup:!0}).addArgument({key:"json",name:"JSON",description:"JSON (string) version of record to replace",required:!0,validator:function(e){if(e.length>=32709&&"}"!==e[e.length-1])return GGlob.JPromise.ofScalar({valid:!1,message:"Warning! The value of the JSON parameter is probably truncated."})}}).addArgument({key:"change reason",name:"CHANGE REASON",description:"Text for the record change",required:!1}).addValidator(validate4Params,{RequireCrossValidation:!0}).setExecutor((function(e){var t=e.uuid.getValue(),r=e.json.getValue();return console.log("retrieved args"),SubstanceFinder.get(t).andThen((function(t){var n=t.patch();console.log("called .patch"),r=r.replace(/ꬷ/g,"\\n"),console.log("called .replace");var o=JSON.parse(r);return n=n.replace("",o),console.log("updated patch"),n.add("/changeReason",e["change reason"].getValue()).apply().andThen((function(){}))}))})).useFor((function(e){Scripts.addScript(e)})),Script.builder().mix({name:"Set Code Access",description:"Sets the permission on a code for a given substance record"}).addArgument({key:"uuid",name:"UUID",description:"UUID of the substance record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"pt",name:"PT",description:"Preferred Term of the substance record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"bdnum",name:"BDNUM",description:"BDNUM of the record (used for lookup/validation)",usedForLookup:!0}).addArgument({key:"code system",name:"CODE SYSTEM",description:"Code system to modify",required:!0,defaultValue:"CAS"}).addArgument({key:"access",name:"ACCESS",defaultValue:"protected",description:"Text for the access value of the code",required:!0}).addArgument({key:"change reason",name:"CHANGE REASON",defaultValue:"Changing Code protection",description:"Text for the record change",required:!1}).addValidator(validate4Params,{RequireCrossValidation:!1}).setExecutor((function(e){var t=e.uuid.getValue(),r=e.pt.getValue(),n=e["code system"].getValue(),o=e.access.getValue(),a=t||r;return GGlob.SubstanceFinder.comprehensiveSubstanceSearchByArgs(e).andThen((function(e){if(!e||!e.content||0===e.content.length)return{valid:!1,message:"search for "+a+" returned no records"};var t=e.content[0];return s0=GGlob.SubstanceBuilder.fromSimple(t),"string"==typeof s0?{valid:!1,message:s0}:s0?s0.full():{valid:!1,message:"unexpected error"}})).andThen((function(t){if(console.log("Starting in second andThen"),!1===t.valid)return t;console.log("Looking at codes collection which has "+t.codes.length);var r=[],a=[];_.forEach(t.codes,(function(e,t){e.codeSystem===n&&(e.access&&"object"==typeof e.access||(console.log("creating access array"),e.access=[]),console.log("Appending access: "+o),"[NONE]"===o?e.access=[]:e.access.push(o),r.push(e),a.push(t))}));var i=s0.patch();return _.forEach(r,(function(e,t){i.appendTransform((function(t){console.log("inside transform, looking at code with uuid "+e.uuid);for(var r=0;r<t.codes.length;r++)t.codes[r].uuid===e.uuid&&(t.codes[r]=e,console.log("going to replace code at pos "+r));return t}))})),i.add("/changeReason",e["change reason"].getValue()).apply().andThen((function(e){return e}))}))})).useFor((function(e){Scripts.addScript(e)})),Script.builder().mix({name:"Create Substance",description:"Creates a brand new substance record"}).addArgument({key:"pt",name:"PT",description:"Preferred Term of the new substance",required:!0,validator:function(e,t){return GGlob.SubstanceFinder.searchByExactNameOrCode(e).andThen((function(e){return e.content&&e.content.length>=1?{valid:!1,message:"The PT for this record already exists"}:{valid:!0}}))}}).addArgument({key:"pt language",name:"PT LANGUAGE",description:"language for Preferred Term",required:!0,defaultValue:"English",opPromise:CVHelper.getTermList("LANGUAGE"),type:"cv",cvType:"LANGUAGE"}).addArgument({key:"pt name type",name:"PT NAME TYPE",description:"2/3-letter name type (e.g., cn, of) for Preferred Term",required:!0,defaultValue:"cn",opPromise:CVHelper.getTermList("NAME_TYPE"),type:"cv",cvType:"NAME_TYPE"}).addArgument({key:"substance class",name:"SUBSTANCE CLASS",description:"Category",required:!0,defaultValue:"chemical",opPromise:CVHelper.getTermList("SUBSTANCE_CLASS"),type:"cv",cvType:"SUBSTANCE_CLASS"}).addArgument({key:"smiles",name:"SMILES",description:"Structure as SMILES",required:!1}).addArgument({key:"molfile",name:"MOLFILE",description:"Structure as molfile",required:!1}).addArgument({key:"reference type",name:"REFERENCE TYPE",description:"Type of reference (must match a vocabulary)",defaultValue:"SYSTEM",required:!1,opPromise:CVHelper.getTermList("DOCUMENT_TYPE"),type:"cv",cvType:"DOCUMENT_TYPE"}).addArgument({key:"reference citation",name:"REFERENCE CITATION",description:"Citation text for reference",required:!0}).addArgument({key:"reference url",name:"REFERENCE URL",description:"URL for the reference",required:!1}).addArgument({key:"pd",name:"PD",description:"Public Domain status of the substance (sets access for reference as well)",defaultValue:!1,required:!1,type:"boolean"}).addArgument({key:"cas",name:"CAS",description:"CAS Registry number (primary) for  the new substance",defaultValue:null,required:!1}).addArgument({key:"casCodeSystem",name:"CAS CODE SYSTEM",description:"Code System for CAS number",defaultValue:"CAS",required:!1}).addArgument({key:"change reason",name:"CHANGE REASON",defaultValue:"Creating new substance",description:"Text for the record change",required:!1}).addValidator(validateSubstanceWithStructure,null).setExecutor((function(e){console.log("Starting in Create Substance executor");var t=e.pt.getValue(),r=e["substance class"].getValue(),n=e.pd.isYessy(),o=e["reference type"].getValue(),a=e["reference citation"].getValue(),i=e["reference url"].getValue(),u=e.smiles.getValue(),s=e.molfile.getValue(),c=e["pt name type"].getValue();console.log("nameType: "+c);var d=e["pt language"].getValue(),l=null,g=e.cas.getValue(),f=e.casCodeSystem.getValue();if(console.log("codeSystem  "+f),g&&null!=g&&g.length>0){var p="https://commonchemistry.cas.org/detail?cas_rn="+g;l=Code.builder().setCode(g).setType("PRIMARY").setCodeSystem(f).setPublic(n).setUrl(p)}console.log("code: "+JSON.stringify(l));var m=GSRSAPI.builder().UUID.randomUUID(),h=Reference.builder().mix({citation:a,docType:o});i&&i.length>0&&(h=h.setUrl(i)),n?(h.setPublic(!0),h.setPublicDomain(!0)):(h.setPublic(!1),h.setPublicDomain(!1)),h.uuid=m;var y=[];y.push(d),console.log("pushed "+d+" onto langs");var S=Name.builder().setName(t).standardize(t).setType(c).setPublic(n).setPreferred(!1).setDisplay(!0).setLanguages(y).addReference(h);console.log("created name");var v={substanceClass:r,access:["protected"],names:[],references:[],codes:[]};if(v.names.push(S),v.references.push(h),l&&v.codes.push(l),u&&u.length>0||s&&s.length>0){console.log("Processing SMILES/molfile");var b={};b.smiles=u,s&&s.length>0?(console.log("molfileText not null."),b.molfile=s):(console.log("molfileText null."),b.molfile=u),b.references=[],b.references.push(m),v.structure=b}var T=SubstanceBuilder.fromSimple(v).patch();return e["change reason"]&&e["change reason"].getValue()&&T.add("/changeReason",e["change reason"].getValue()),T.apply().andThen((function(e){return e}))})).useFor((function(e){Scripts.addScript(e)})),Script.builder().mix({name:"Create Substance from SD File",description:"Creates a brand new substance record using data read in from an SD file",validForSheetCreation:!1}).addArgument({key:"pt",name:"PT",description:"Preferred Term of the new substance",required:!0,validator:function(e,t){return GGlob.SubstanceFinder.searchByExactNameOrCode(e).andThen((function(e){return e.content&&e.content.length>=1?{valid:!1,message:"The PT for this record already exists"}:{valid:!0}}))}}).addArgument({key:"pt language",name:"PT LANGUAGE",description:"language for Preferred Term",required:!0,defaultValue:"en",opPromise:CVHelper.getTermList("LANGUAGE"),type:"cv",cvType:"LANGUAGE"}).addArgument({key:"pt name type",name:"PT NAME TYPE",description:"2/3-letter name type (e.g., cn, of) for Preferred Term",required:!0,defaultValue:"cn",opPromise:CVHelper.getTermList("NAME_TYPE"),type:"cv",cvType:"NAME_TYPE"}).addArgument({key:"substance class",name:"SUBSTANCE CLASS",description:"Category",required:!0,defaultValue:"chemical",opPromise:CVHelper.getTermList("SUBSTANCE_CLASS"),type:"cv",cvType:"SUBSTANCE_CLASS"}).addArgument({key:"smiles",name:"SMILES",description:"Structure as SMILES",required:!1}).addArgument({key:"molfile",name:"MOLFILE",description:"Structure as molfile",required:!1}).addArgument({key:"reference type",name:"REFERENCE TYPE",description:"Type of reference (must match a vocabulary)",defaultValue:"SYSTEM",required:!1,opPromise:CVHelper.getTermList("DOCUMENT_TYPE"),type:"cv",cvType:"DOCUMENT_TYPE"}).addArgument({key:"reference citation",name:"REFERENCE CITATION",description:"Citation text for reference",required:!0}).addArgument({key:"reference url",name:"REFERENCE URL",description:"URL for the reference",required:!1}).addArgument({key:"pd",name:"PD",description:"Public Domain status of the code (sets access for reference as well)",defaultValue:!1,required:!1,type:"boolean"}).addArgument({key:"cas",name:"CAS",description:"CAS number",defaultValue:!1,required:!1}).addArgument({key:"standardize",name:"STANDARDIZE",description:"Apply a cleaning procedure to the text of the name",defaultValue:"true",required:!1,type:"boolean"}).addArgument({key:"change reason",name:"CHANGE REASON",defaultValue:"Creating new substance",description:"Text for the record change",required:!1}).setExecutor((function(e){console.log("Starting in Create Substance from SD File executor");var t=e.pt.getValue(),r=e["substance class"].getValue(),n=e.pd.isYessy(),o=e["reference type"].getValue(),a=e["reference citation"].getValue(),i=e["reference url"].getValue(),u=e.smiles.getValue(),s=e.molfile.getValue(),c=e["pt name type"].getValue();console.log("nameType: "+c);var d=e["pt language"].getValue(),l=GSRSAPI.builder().UUID.randomUUID(),g=e.cas.getValue(),f=Reference.builder().mix({citation:a,docType:o});i&&i.length>0&&(f=f.setUrl(i)),n?(f.setPublic(!0),f.setPublicDomain(!0)):(f.setPublic(!1),f.setPublicDomain(!1)),f.uuid=l;var p=[];p.push(d),console.log("pushed "+d+" onto langs");var m=Name.builder().setName(t).setType(c).setPublic(n).setPreferred(!1).setDisplay(!0).setLanguages(p).addReference(f);console.log("created name");var h={substanceClass:r,access:["protected"],names:[],references:[],properties:[]},y=null;for(var S in g&&(y=Code.builder().setCode(g).setType("PRIMARY").setCodeSystem("CAS").setPublic(n)),h.names.push(m),h.references.push(f),e)if(console.log("arg name "+S),S.toUpperCase().indexOf("PROPERTY:")>-1&&e[S].getValue()){var v=S.split(":"),b=v[1],T="",E="";v.length>=3&&(T=v[2]),v.length>=4&&(E=v[3]),console.log("Creating property "+b);var A=Property.builder().setName(b),R=parseFloat(e[S].getValue());isNaN(R)||T&&"TEXT"===T.toUpperCase()?A.setPropertyStringValue(e[S].getValue()):T?"HIGH"===T.toUpperCase()?(console.log("setting high value"),A.setHigh(R)):"LOW"===T.toUpperCase()?(console.log("setting low value"),A.setLow(R)):(console.log("setting average value"),A.setAverage(R)):(console.log("setting average value (default)"),A.setAverage(R)),E&&A.setUnits(E),h.properties.push(A)}if(u&&u.length>0||s&&s.length>0){console.log("Processing SMILES/molfile");var P={};P.smiles=u,s&&s.length>0?(console.log("molfileText not null."),P.molfile=s):(console.log("molfileText null."),P.molfile=u),P.references=[],P.references.push(l),h.structure=P}var C=SubstanceBuilder.fromSimple(h);y&&(C.codes=[],C.codes.push(y),console.log("Adding CAS number"));var k=C.patch();return e["change reason"]&&e["change reason"].getValue()&&k.add("/changeReason",e["change reason"].getValue()),k.apply().andThen((function(e){return e}))})).useFor((function(e){Scripts.addScript(e)})),Script.builder().mix({name:"Touch Record",description:"Retrieve a substance record and save again with no futher changes"}).addArgument({key:"uuid",name:"UUID",description:"UUID of the substance record (used for lookup/validation)",required:!0,usedForLookup:!0}).addArgument({key:"change reason",name:"CHANGE REASON",defaultValue:"Trigger update processing",description:"Text for the record change",required:!1}).setExecutor((function(e){var t=e.uuid.getValue();return SubstanceFinder.get(t).andThen((function(t){return console.log("Processing "+t.uuid),t.patch().add("/changeReason",e["change reason"].getValue()).apply().andThen(_.identity)}))})).useFor((function(e){Scripts.addScript(e)})),Script.builder().mix({name:"Replace Name",description:"Locates an existing name within a substance record and replaces it with a new name"}).addArgument({key:"uuid",name:"UUID",description:"UUID of the substance record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"pt",name:"PT",description:"Preferred Term of the record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"bdnum",name:"BDNUM",description:"BDNUM of the record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"current name",name:"CURRENT NAME",description:"Name text of the name to replace",required:!0,validator:function(e){return GGlob.SubstanceFinder.searchByExactName(e).andThen((function(t){return t.content&&t.content.length<1?{valid:!1,message:"The name '"+e+"' was not found in the database. "}:{valid:!0}}))}}).addArgument({key:"new name",name:"NEW NAME",description:"Text for the record change",required:!0}).addArgument({key:"change reason",name:"CHANGE REASON",defaultValue:"Replace Name",description:"Text for the record change",required:!1}).addValidator(validate4Params,{RequireCrossValidation:!0}).setExecutor((function(e){e.uuid.getValue(),e.pt.getValue(),e.bdnum.getValue();var t,r=e["current name"].getValue(),n=e["new name"].getValue(),o=null;return GGlob.SubstanceFinder.comprehensiveSubstanceSearchByArgs(e).andThen((function(e){var r,n=e.content[0];return"string"==typeof(r=GGlob.SubstanceBuilder.fromSimple(n))?{valid:!1,message:r}:(t=r,r.full())})).andThen((function(a){for(var i=-1,u=0;u<a.names.length;u++)if(a.names[u].name===r){i=u,o=Name.builder().setName(n).setType(a.names[u].type).setLanguages(a.names[u].languages).setDomains(a.names[u].domains).setNameOrgs(a.names[u].nameOrgs),console.log("Built name with value "+n+"; type: "+a.names[u].type+"; domains: "+a.names[u].domains),o.public=a.names[u].public,o.references=a.names[u].references,o.access=a.names[u].access,console.log("\tapplied additional properties such as public "+o.public);break}return i<=-1?{valid:!1,message:"Unable to locate name to replace: "+r}:t.patch().replace("/names/"+i,o).add("/changeReason",e["change reason"].getValue()).apply().andThen(_.identity)}))})).useFor((function(e){Scripts.addScript(e)})),Script.builder().mix({name:"Volume of Distribution",description:"Add values to Volume of Distribution Property for a substance record"}).addArgument({key:"uuid",name:"UUID",description:"UUID of the substance record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"pt",name:"PT",description:"Preferred Term of the record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"bdnum",name:"BDNUM",description:"BDNUM of the record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"low value",name:"LOW VALUE",description:"Minimum of the value range",required:!1}).addArgument({key:"high value",name:"HIGH VALUE",description:"Maximum of the value range",required:!1}).addArgument({key:"average",name:"AVERAGE",description:"Middle of the value range",required:!1}).addArgument({key:"units",name:"UNITS",description:"Unit of measure for this value",required:!1,defaultValue:"Liters/Kilogram"}).addArgument({key:"reference type",name:"REFERENCE TYPE",description:"Type of reference (must match a vocabulary)",defaultValue:"SYSTEM",required:!1,opPromise:CVHelper.getTermList("DOCUMENT_TYPE"),type:"cv",cvType:"DOCUMENT_TYPE"}).addArgument({key:"reference citation",name:"REFERENCE CITATION",description:"Citation text for reference",required:!0}).addArgument({key:"reference url",name:"REFERENCE URL",description:"URL for the reference",required:!1}).addArgument({key:"pd",name:"PD",description:"Public Domain status of the property (sets access for reference as well)",defaultValue:!1,required:!1,type:"boolean"}).addArgument({key:"reference tags",name:"REFERENCE TAGS",description:"pipe-delimited set of tags for the reference",required:!1}).addArgument({key:"change reason",name:"CHANGE REASON",defaultValue:"Adding a value to the Volume of Distribution property",description:"Text for the record change",required:!1}).addValidator(validate4Params,null).setExecutor((function(e){var t,r=e.uuid.getValue(),n=e.pt.getValue(),o=(e.bdnum.getValue(),e["low value"].getValue()),a=e["high value"].getValue(),i=e.average.getValue(),u=e.units.getValue(),s=e["reference type"].getValue(),c=e["reference citation"].getValue(),d=e["reference url"].getValue(),l=e["reference tags"].getValue(),g=e.pd.isYessy(),f=Reference.builder().mix({citation:c,docType:s});if(d&&d.length>0&&(f=f.setUrl(d)),g?(f.setPublic(!0),f.setPublicDomain(!0)):(f.setPublic(!1),f.setPublicDomain(!1)),l&&l.length>0){var p=l.split("|"),m=[];_.forEach(p,(function(e){m.push(e)})),f.tags=m}r&&0!==r.length||n&&n.length;var h,y=Property.builder().setName("Volume of Distribution");return y.setType("PHARMACOKINETIC"),isNaN(parseFloat(o))?console.log("omitted low value"):(y.setLow(o),console.log("set low value: "+o)),isNaN(parseFloat(a))?console.log("omitted high value"):(y.setHigh(a),console.log("set high value: "+a)),isNaN(parseFloat(i))?console.log("omitted avg value"):(y.setAverage(i),console.log("set avg value: "+i)),u&&y.setUnits(u),g||y.setAccess(["restricted"]),GGlob.SubstanceFinder.comprehensiveSubstanceSearchByArgs(e).andThen((function(e){var r=e.content[0];return"string"==typeof(h=GGlob.SubstanceBuilder.fromSimple(r))?{valid:!1,message:h}:(t=h,h.full())})).andThen((function(r){return void 0===t?{valid:!1,message:h}:t.fetch("references").andThen((function(r){return _.forEach(r,(function(e){if(Reference.isDuplicate(e,s,c,d))return console.log("Duplicate reference found! Will skip creation of new one."),f=e,!1})),f&&y.addReference(f),t.patch().addData(y).add("/changeReason",e["change reason"].getValue()).apply().andThen(_.identity)}))}))})).useFor((function(e){Scripts.addScript(e)})),Script.builder().mix({name:"Add Property Value",description:"Add a value to a specified property for a substance record"}).addArgument({key:"uuid",name:"UUID",description:"UUID of the substance record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"pt",name:"PT",description:"Preferred Term of the record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"bdnum",name:"BDNUM",description:"BDNUM of the record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"property name",name:"PROPERTY NAME",description:"Property to use",required:!0,opPromise:CVHelper.getTermList("PROPERTY_NAME"),type:"cv",cvType:"PROPERTY_NAME"}).addArgument({key:"property category",name:"PROPERTY CATEGORY",description:"classification of property within GSRS",required:!1,opPromise:CVHelper.getTermList("PROPERTY_TYPE"),type:"cv",cvType:"PROPERTY_TYPE"}).addArgument({key:"low value",name:"LOW VALUE",description:"Minimum of the value range",required:!1}).addArgument({key:"high value",name:"HIGH VALUE",description:"Maximum of the value range",required:!1}).addArgument({key:"average",name:"AVERAGE",description:"Middle of the value range",required:!1}).addArgument({key:"text value",name:"TEXT VALUE",description:"String to assign to the property",required:!1}).addArgument({key:"units",name:"UNITS",description:"Unit of measure for this value",required:!1,defaultValue:"Liters/Kilogram"}).addArgument({key:"reference type",name:"REFERENCE TYPE",description:"Type of reference (must match a vocabulary)",defaultValue:"SYSTEM",required:!1,opPromise:CVHelper.getTermList("DOCUMENT_TYPE"),type:"cv",cvType:"DOCUMENT_TYPE"}).addArgument({key:"reference citation",name:"REFERENCE CITATION",description:"Citation text for reference",required:!0}).addArgument({key:"reference url",name:"REFERENCE URL",description:"URL for the reference",required:!1}).addArgument({key:"pd",name:"PD",description:"Public Domain status of the property (sets access for reference as well)",defaultValue:!1,required:!1,type:"boolean"}).addArgument({key:"reference tags",name:"REFERENCE TAGS",description:"pipe-delimited set of tags for the reference",required:!1}).addArgument({key:"change reason",name:"CHANGE REASON",defaultValue:"Adding a value to a selected property",description:"Text for the record change",required:!1}).addValidator(validate4Params).setExecutor((function(e){e.uuid.getValue(),e.pt.getValue(),e.bdnum.getValue();var t,r=e["low value"].getValue(),n=e["high value"].getValue(),o=e.average.getValue(),a=e.units.getValue(),i=e["reference type"].getValue(),u=e["reference citation"].getValue(),s=e["reference url"].getValue(),c=e["reference tags"].getValue(),d=e.pd.isYessy(),l=e["property name"].getValue(),g=e["property category"].getValue(),f=e["text value"].getValue(),p=Reference.builder().mix({citation:u,docType:i});if(s&&s.length>0&&(p=p.setUrl(s)),d?(p.setPublic(!0),p.setPublicDomain(!0)):(p.setPublic(!1),p.setPublicDomain(!1)),c&&c.length>0){var m=c.split("|"),h=[];_.forEach(m,(function(e){h.push(e)})),p.tags=h}var y,S=Property.builder().setName(l);return S.setType(g),isNaN(parseFloat(r))?console.log("omitted low value"):(S.setLow(r),console.log("set low value: "+r)),isNaN(parseFloat(n))?console.log("omitted high value"):(S.setHigh(n),console.log("set high value: "+n)),isNaN(parseFloat(o))?console.log("omitted avg value"):(S.setAverage(o),console.log("set avg value: "+o)),a&&S.setUnits(a),f&&S.setPropertyStringValue(f),d||S.setAccess(["restricted"]),GGlob.SubstanceFinder.comprehensiveSubstanceSearchByArgs(e).andThen((function(e){var r=e.content[0];return"string"==typeof(y=GGlob.SubstanceBuilder.fromSimple(r))?{valid:!1,message:y}:(t=y,y.full())})).andThen((function(r){return"string"==typeof y?{valid:!1,message:y}:t.fetch("references").andThen((function(r){return _.forEach(r,(function(e){if(Reference.isDuplicate(e,i,u,s))return console.log("Duplicate reference found! Will skip creation of new one."),p=e,!1})),p&&S.addReference(p),t.patch().addData(S).add("/changeReason",e["change reason"].getValue()).apply().andThen(_.identity)}))}))})).useFor((function(e){Scripts.addScript(e)})),Script.builder().mix({name:"Save Temporary Structure",description:"Saves a molfile or SMILES in a temporary area (disappears after service restart)",validForSheetCreation:!1}).addArgument({key:"molfile",name:"Molfile",description:"structure to save",required:!0}).setExecutor((function(e){var t=e.molfile.getValue();return GGlob.SubstanceFinder.saveTemporaryStructure(t).andThen((function(e){return console.log("saveTemporaryStructure script received s: "+JSON.stringify(e)),"string"==typeof e&&e.indexOf("<html>")>-1?"Error: not authenticated":"object"!=typeof e||e.valid||e.structure?(console.log("going to return s.structure.id "+e.structure.id),SubstanceFinder.getExactStructureMatches(e.structure.id).andThen((function(t){return console.log("searchResult: "+JSON.stringify(t)),{valid:!0,message:"structureid="+e.structure.id,matches:t.content}}))):(console.log("detected error"),e.message?e.message:"an error occurred")}))})).useFor((function(e){Scripts.addScript(e)})),Script.builder().mix({name:"Process Application",description:"Saves Application JSON to server",validForSheetCreation:!1}).addArgument({key:"url",name:"URL",description:"Application-specific URL, different from general g-srs URL",required:!0}).addArgument({key:"json",name:"JSON",description:"JSON representation of an Application object",required:!0}).setExecutor((function(e){console.log("starting in script executor");var t=e.url.getValue();console.log("url: "+t);var r=JSON.parse(e.json.getValue()),n=Request.builder().url(t).body(r).method("POST");return n.setContentType("application/json"),console.log("constructed req"),RequestProcessor.SimpleProcess(n).andThen((function(e){var t;return console.log("result of application processing: "),console.log(JSON.stringify(e)),"string"==typeof e?(console.log("parsed"),t=JSON.parse(e)):t=e,t.id?{valid:!0,message:"Created Application with ID "+t.id,modification:!1}:(console.log(JSON.stringify(t)),{valid:!1,message:"An error occurred while creating/modifying your application. "+JSON.stringify(t),modification:!1})}))})).useFor((function(e){Scripts.addScript(e)})),Script.builder().mix({name:"Add Note",description:"Adds a note to a substance record"}).addArgument({key:"uuid",name:"UUID",description:"UUID of the substance record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"pt",name:"PT",description:"Preferred Term of the record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"bdnum",name:"BDNUM",description:"BDNUM of the record (used for lookup/validation)",required:!1,usedForLookup:!0}).addArgument({key:"note",name:"NOTE",description:"Note text of the new note item",required:!0}).addArgument({key:"pd",name:"PD",description:"Public Domain status of the name (sets access for reference as well)",defaultValue:!1,required:!1,type:"boolean"}).addArgument({key:"reference type",name:"REFERENCE TYPE",description:"Type of reference (must match a vocabulary)",defaultValue:"SYSTEM",required:!1,type:"cv",opPromise:CVHelper.getTermList("DOCUMENT_TYPE"),cvType:"DOCUMENT_TYPE"}).addArgument({key:"reference citation",name:"REFERENCE CITATION",description:"Citation text for reference",required:!1}).addArgument({key:"reference url",name:"REFERENCE URL",description:"URL for the reference",required:!1}).addArgument({key:"change reason",name:"CHANGE REASON",defaultValue:"Added Note",description:"Text for the record change",required:!1}).addValidator(validate4Params,null).setExecutor((function(e){var t=e.uuid.getValue(),r=e.pt.getValue(),n=(e.bdnum.getValue(),e.note.getValue()),o=e.pd.isYessy(),a=e["reference type"].getValue(),i=e["reference citation"].getValue(),u=e["reference url"].getValue(),s=Reference.builder().mix({citation:i,docType:a});u&&u.length>0&&(console.log("setting file URL"),s=s.setUploadFileUrl(u)),o?(console.log("perceived public reference"),s.setPublic(!0),s.setPublicDomain(!0)):(console.log("perceived NON public reference"),s.setPublic(!1),s.setPublicDomain(!1));var c,d=Note.builder().setNote(n).setPublic(o);return t&&0!==t.length||r&&r.length,GGlob.SubstanceFinder.comprehensiveSubstanceSearchByArgs(e).andThen((function(t){var r=t.content[0];return"string"==typeof(c=GGlob.SubstanceBuilder.fromSimple(r))?{valid:!1,message:c}:c.fetch("references").andThen((function(e){return _.forEach(e,(function(e){if(Reference.isDuplicate(e,a,i,u))return console.log("Duplicate reference found! Will skip creation of new one."),s=e,!1})),d.addReference(s),c})).andThen((function(t){return c.patch().addData(d).add("/changeReason",e["change reason"].getValue()).apply().andThen(_.identity)}))}))})).useFor((function(e){Scripts.addScript(e)})),Script.builder().mix({name:"Fetch Data",description:"retrieves the result of a GET (that requires authentication via SSO)",validForSheetCreation:!1}).addArgument({key:"url",name:"URL",description:"web resource to fetch",required:!0}).setExecutor((function(e){var t=e.url.getValue();return GGlob.SimpleLookup.lookup(t).andThen((function(e){return console.log("SimpleLookup received a: "+e),"string"==typeof e&&e.indexOf("<html>")>-1?"Error: not authenticated":(console.log("going to return a "+e),e)}))})).useFor((function(e){Scripts.addScript(e)})),Script.builder().mix({name:"Add Ingredient",description:"retrieves an application then adds an ingredient",validForSheetCreation:!1}).addArgument({key:"getUrl",name:"GET URL",description:"web resource from which to fetch Application",required:!0}).addArgument({key:"postUrl",name:"POST URL",description:"web resource to which we return the updated Application",required:!0}).addArgument({key:"ingredientBdnum",name:"Ingredient BDNUM",description:"BDNUM of new ingredient to add to existing Application",required:!1}).addArgument({key:"substanceKey",name:"Substance Key",description:"Name of new ingredient to add to existing Application",required:!0}).addArgument({key:"basisOfStrengthBdnum",name:"Basis of Strength BDNUM",description:"BDNUM of substance that is the basis of strength of the ingredient",required:!1}).addArgument({key:"basisOfStrengthSubstanceKey",name:"Basis of Strength Name",description:"Name of substance that is the basis of strength of the ingredient",required:!1}).addArgument({key:"ingredientType",name:"Ingredient Type",description:"Type/category of the ingredient",required:!1}).addArgument({key:"average",name:"Average",description:"Average amount of the ingredient within the product",required:!1}).addArgument({key:"low",name:"Low",description:"Low end of range for the amount of the ingredient within the product",required:!1}).addArgument({key:"high",name:"High",description:"High end of range for the amount of the ingredient within the product",required:!1}).addArgument({key:"unit",name:"Unit",description:"Unit for ingredient amount",required:!1}).addArgument({key:"applicantIngredName",name:"Applicant Ingredient Name",description:"Name for ingredient within product",required:!1}).setExecutor((function(e){console.log("starting in executor");var t=encodeURI(e.getUrl.getValue());console.log("using URL "+t);var r=e.postUrl.getValue(),n=null,o=null,a=e.substanceKey.getValue(),i=e.basisOfStrengthSubstanceKey.getValue(),u=["average","low","high","unit","applicantIngredName"];return completeIngredientAddition=function(t,n,o){console.log("starting in completeIngredientAddition");var a={};for(var i in a.substanceKey=n,a.substanceKeyType="BDNUM",UUID.isUUID(n)&&(a.substanceKeyType="UUID"),a.basisOfStrengthSubstanceKey=o,a.basisOfStrengthSubstanceKeyType="BDNUM",UUID.isUUID(o)&&(a.basisOfStrengthSubstanceKeyType="UUID"),a.ingredientType=e.ingredientType.getValue(),u){var s=u[i];if("function"!=typeof s){var c=e[s].getValue();console.log("value of "+s+" = "+c),c&&c.length>0&&(a[s]=c),console.log("setting complete")}}t.applicationProductList&&void 0!==t.applicationProductList?0===t.applicationProductList.length&&(t.applicationProductList[0]=new Object,t.applicationProductList[0].applicationIngredientList=new Array):(t.applicationProductList=new Array,t.applicationProductList[0]=new Object,t.applicationProductList[0].applicationIngredientList=new Array);var d=t.applicationProductList[0].applicationIngredientList;console.log("application.applicationProductList (before): "+JSON.stringify(t.applicationProductList)),_.remove(d,(function(e){return null===e.bdnum&&null===e.applicantIngredName&&null===e.basisOfStrengthBdnum})),d[d.length]=a,console.log("ingredientList (after): "+JSON.stringify(d)),t.applicationProductList[0].applicationIngredientList=d,console.log("application.applicationProductList (after): "+JSON.stringify(t.applicationProductList));var l=t.id;console.log("applicationId: "+l);var g=Request.builder().url(r).body(t).method("PUT");return g.setContentType("application/json"),console.log("constructed req"),RequestProcessor.SimpleProcess(g).andThen((function(e){var t;return console.log("result of application processing: "),console.log(JSON.stringify(e)),"string"==typeof e?(console.log("parsed"),t=JSON.parse(e)):t=e,t.id?{valid:!0,message:"success",additionalInformation:"Saved Application with ID "+t.id,modification:!0}:{valid:!1,message:"An error occurred while creating/modifying your application. "+JSON.stringify(t),modification:!0}}))},GGlob.SimpleLookup.getData(t).andThen((function(e){return console.log("SimpleLookup received: "),"string"==typeof e&&e.indexOf("<html>")>-1?"Error: not authenticated":(t="string"==typeof e?JSON.parse(e):e,console.log(JSON.stringify(t)),t.content&&1===t.content.length&&(t=t.content[0]),t.hasOwnProperty("createdBy")||t.hasOwnProperty("created")?GGlob.SubstanceFinder.searchByExactNameOrCode(a).andThen((function(e){if(e.content&&e.content.length>=1){console.log("looked up substance by name "+a);var r=e.content[0],u=GGlob.SubstanceBuilder.fromSimple(r);return u.fetch("codes(codeSystem:BDNUM)").andThen((function(r){if(n="object"==typeof r?r[0]?r[0].code:u.uuid:r,console.log("got bdnum: "+n),null!=n&&n.length>=9&&n.length<=12||UUID.isUUID(n))return i&&null!==i&&i.length>0?GGlob.SubstanceFinder.searchByExactNameOrCode(i).andThen((function(r){if(r.content&&r.content.length>=1&&r.content&&r.content.length>=1){console.log("looked up substance by name "+i);var a=e.content[0],u=GGlob.SubstanceBuilder.fromSimple(a);return u.fetch("codes(codeSystem:BDNUM)").andThen((function(e){return console.log("raw basisOfStrengthBdnum: "+e),(o="object"==typeof e?e[0]?e[0].code:u.uuid:e)===GSRSAPI.MultipleMatchMessage&&(o=null),console.log("got basisOfStrengthBdNumValue: "+o+" and will now call completeIngredientAddition"),completeIngredientAddition(t,n,o)}))}})):completeIngredientAddition(t,n,null)}))}return{valid:!1,message:"Error retrieving ingredient: "+a}})):{valid:!1,message:"Error retrieving application. "});var t}))})).useFor((function(e){Scripts.addScript(e)}));